
// Generated by Cadence Genus(TM) Synthesis Solution 17.22-s017_1
// Generated on: Nov 15 2018 10:54:38 CET (Nov 15 2018 09:54:38 UTC)

// Verification Directory fv/raifes_dtm 

module or_op(A, Z);
  input [1:0] A;
  output Z;
  wire [1:0] A;
  wire Z;
  wire n_3;
  nor g1 (n_3, A[0], A[1]);
  not g2 (Z, n_3);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_17(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  wire ctl;
  wire [1:0] in_0, in_1;
  wire [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_18(ctl, in_0, in_1, z);
  input ctl;
  input [2:0] in_0, in_1;
  output [2:0] z;
  wire ctl;
  wire [2:0] in_0, in_1;
  wire [2:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_32(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7,
     in_8, in_9, in_10, in_11, in_12, in_13, in_14, in_15, z);
  input [3:0] ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7,
       in_8, in_9, in_10, in_11, in_12, in_13, in_14, in_15;
  output [3:0] z;
  wire [3:0] ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8,
       in_9, in_10, in_11, in_12, in_13, in_14, in_15;
  wire [3:0] z;
  CDN_bmux16 g1(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .sel2
       (ctl[2]), .data4 (in_4[3]), .data5 (in_5[3]), .data6 (in_6[3]),
       .data7 (in_7[3]), .sel3 (ctl[3]), .data8 (in_8[3]), .data9
       (in_9[3]), .data10 (in_10[3]), .data11 (in_11[3]), .data12
       (in_12[3]), .data13 (in_13[3]), .data14 (in_14[3]), .data15
       (in_15[3]), .z (z[3]));
  CDN_bmux16 g2(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .sel2
       (ctl[2]), .data4 (in_4[2]), .data5 (in_5[2]), .data6 (in_6[2]),
       .data7 (in_7[2]), .sel3 (ctl[3]), .data8 (in_8[2]), .data9
       (in_9[2]), .data10 (in_10[2]), .data11 (in_11[2]), .data12
       (in_12[2]), .data13 (in_13[2]), .data14 (in_14[2]), .data15
       (in_15[2]), .z (z[2]));
  CDN_bmux16 g3(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .sel2
       (ctl[2]), .data4 (in_4[1]), .data5 (in_5[1]), .data6 (in_6[1]),
       .data7 (in_7[1]), .sel3 (ctl[3]), .data8 (in_8[1]), .data9
       (in_9[1]), .data10 (in_10[1]), .data11 (in_11[1]), .data12
       (in_12[1]), .data13 (in_13[1]), .data14 (in_14[1]), .data15
       (in_15[1]), .z (z[1]));
  CDN_bmux16 g4(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .sel2
       (ctl[2]), .data4 (in_4[0]), .data5 (in_5[0]), .data6 (in_6[0]),
       .data7 (in_7[0]), .sel3 (ctl[3]), .data8 (in_8[0]), .data9
       (in_9[0]), .data10 (in_10[0]), .data11 (in_11[0]), .data12
       (in_12[0]), .data13 (in_13[0]), .data14 (in_14[0]), .data15
       (in_15[0]), .z (z[0]));
endmodule

module mux(ctl, in_0, in_1, z);
  input [1:0] ctl;
  input [4:0] in_0, in_1;
  output [4:0] z;
  wire [1:0] ctl;
  wire [4:0] in_0, in_1;
  wire [4:0] z;
  CDN_mux2 g1(.sel0 (ctl[1]), .data0 (in_0[4]), .sel1 (ctl[0]), .data1
       (in_1[4]), .z (z[4]));
  CDN_mux2 g6(.sel0 (ctl[1]), .data0 (in_0[3]), .sel1 (ctl[0]), .data1
       (in_1[3]), .z (z[3]));
  CDN_mux2 g7(.sel0 (ctl[1]), .data0 (in_0[2]), .sel1 (ctl[0]), .data1
       (in_1[2]), .z (z[2]));
  CDN_mux2 g8(.sel0 (ctl[1]), .data0 (in_0[1]), .sel1 (ctl[0]), .data1
       (in_1[1]), .z (z[1]));
  CDN_mux2 g9(.sel0 (ctl[1]), .data0 (in_0[0]), .sel1 (ctl[0]), .data1
       (in_1[0]), .z (z[0]));
endmodule

module bmux_40(ctl, in_0, in_1, z);
  input ctl;
  input [31:0] in_0, in_1;
  output [31:0] z;
  wire ctl;
  wire [31:0] in_0, in_1;
  wire [31:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module mux_42(ctl, in_0, in_1, z);
  input [1:0] ctl;
  input [31:0] in_0, in_1;
  output [31:0] z;
  wire [1:0] ctl;
  wire [31:0] in_0, in_1;
  wire [31:0] z;
  CDN_mux2 g1(.sel0 (ctl[1]), .data0 (in_0[31]), .sel1 (ctl[0]), .data1
       (in_1[31]), .z (z[31]));
  CDN_mux2 g33(.sel0 (ctl[1]), .data0 (in_0[30]), .sel1 (ctl[0]),
       .data1 (in_1[30]), .z (z[30]));
  CDN_mux2 g34(.sel0 (ctl[1]), .data0 (in_0[29]), .sel1 (ctl[0]),
       .data1 (in_1[29]), .z (z[29]));
  CDN_mux2 g35(.sel0 (ctl[1]), .data0 (in_0[28]), .sel1 (ctl[0]),
       .data1 (in_1[28]), .z (z[28]));
  CDN_mux2 g36(.sel0 (ctl[1]), .data0 (in_0[27]), .sel1 (ctl[0]),
       .data1 (in_1[27]), .z (z[27]));
  CDN_mux2 g37(.sel0 (ctl[1]), .data0 (in_0[26]), .sel1 (ctl[0]),
       .data1 (in_1[26]), .z (z[26]));
  CDN_mux2 g38(.sel0 (ctl[1]), .data0 (in_0[25]), .sel1 (ctl[0]),
       .data1 (in_1[25]), .z (z[25]));
  CDN_mux2 g39(.sel0 (ctl[1]), .data0 (in_0[24]), .sel1 (ctl[0]),
       .data1 (in_1[24]), .z (z[24]));
  CDN_mux2 g40(.sel0 (ctl[1]), .data0 (in_0[23]), .sel1 (ctl[0]),
       .data1 (in_1[23]), .z (z[23]));
  CDN_mux2 g41(.sel0 (ctl[1]), .data0 (in_0[22]), .sel1 (ctl[0]),
       .data1 (in_1[22]), .z (z[22]));
  CDN_mux2 g42(.sel0 (ctl[1]), .data0 (in_0[21]), .sel1 (ctl[0]),
       .data1 (in_1[21]), .z (z[21]));
  CDN_mux2 g43(.sel0 (ctl[1]), .data0 (in_0[20]), .sel1 (ctl[0]),
       .data1 (in_1[20]), .z (z[20]));
  CDN_mux2 g44(.sel0 (ctl[1]), .data0 (in_0[19]), .sel1 (ctl[0]),
       .data1 (in_1[19]), .z (z[19]));
  CDN_mux2 g45(.sel0 (ctl[1]), .data0 (in_0[18]), .sel1 (ctl[0]),
       .data1 (in_1[18]), .z (z[18]));
  CDN_mux2 g46(.sel0 (ctl[1]), .data0 (in_0[17]), .sel1 (ctl[0]),
       .data1 (in_1[17]), .z (z[17]));
  CDN_mux2 g47(.sel0 (ctl[1]), .data0 (in_0[16]), .sel1 (ctl[0]),
       .data1 (in_1[16]), .z (z[16]));
  CDN_mux2 g48(.sel0 (ctl[1]), .data0 (in_0[15]), .sel1 (ctl[0]),
       .data1 (in_1[15]), .z (z[15]));
  CDN_mux2 g49(.sel0 (ctl[1]), .data0 (in_0[14]), .sel1 (ctl[0]),
       .data1 (in_1[14]), .z (z[14]));
  CDN_mux2 g50(.sel0 (ctl[1]), .data0 (in_0[13]), .sel1 (ctl[0]),
       .data1 (in_1[13]), .z (z[13]));
  CDN_mux2 g51(.sel0 (ctl[1]), .data0 (in_0[12]), .sel1 (ctl[0]),
       .data1 (in_1[12]), .z (z[12]));
  CDN_mux2 g52(.sel0 (ctl[1]), .data0 (in_0[11]), .sel1 (ctl[0]),
       .data1 (in_1[11]), .z (z[11]));
  CDN_mux2 g53(.sel0 (ctl[1]), .data0 (in_0[10]), .sel1 (ctl[0]),
       .data1 (in_1[10]), .z (z[10]));
  CDN_mux2 g54(.sel0 (ctl[1]), .data0 (in_0[9]), .sel1 (ctl[0]), .data1
       (in_1[9]), .z (z[9]));
  CDN_mux2 g55(.sel0 (ctl[1]), .data0 (in_0[8]), .sel1 (ctl[0]), .data1
       (in_1[8]), .z (z[8]));
  CDN_mux2 g56(.sel0 (ctl[1]), .data0 (in_0[7]), .sel1 (ctl[0]), .data1
       (in_1[7]), .z (z[7]));
  CDN_mux2 g57(.sel0 (ctl[1]), .data0 (in_0[6]), .sel1 (ctl[0]), .data1
       (in_1[6]), .z (z[6]));
  CDN_mux2 g58(.sel0 (ctl[1]), .data0 (in_0[5]), .sel1 (ctl[0]), .data1
       (in_1[5]), .z (z[5]));
  CDN_mux2 g59(.sel0 (ctl[1]), .data0 (in_0[4]), .sel1 (ctl[0]), .data1
       (in_1[4]), .z (z[4]));
  CDN_mux2 g60(.sel0 (ctl[1]), .data0 (in_0[3]), .sel1 (ctl[0]), .data1
       (in_1[3]), .z (z[3]));
  CDN_mux2 g61(.sel0 (ctl[1]), .data0 (in_0[2]), .sel1 (ctl[0]), .data1
       (in_1[2]), .z (z[2]));
  CDN_mux2 g62(.sel0 (ctl[1]), .data0 (in_0[1]), .sel1 (ctl[0]), .data1
       (in_1[1]), .z (z[1]));
  CDN_mux2 g63(.sel0 (ctl[1]), .data0 (in_0[0]), .sel1 (ctl[0]), .data1
       (in_1[0]), .z (z[0]));
endmodule

module bmux_106(ctl, in_0, in_1, z);
  input ctl;
  input [40:0] in_0, in_1;
  output [40:0] z;
  wire ctl;
  wire [40:0] in_0, in_1;
  wire [40:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[40]), .data1 (in_1[40]), .z
       (z[40]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[39]), .data1 (in_1[39]), .z
       (z[39]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[38]), .data1 (in_1[38]), .z
       (z[38]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[37]), .data1 (in_1[37]), .z
       (z[37]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[36]), .data1 (in_1[36]), .z
       (z[36]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[35]), .data1 (in_1[35]), .z
       (z[35]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[34]), .data1 (in_1[34]), .z
       (z[34]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[33]), .data1 (in_1[33]), .z
       (z[33]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[32]), .data1 (in_1[32]), .z
       (z[32]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g33(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g34(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g35(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g36(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g37(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g38(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g39(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g40(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g41(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_107(ctl, in_0, in_1, z);
  input ctl;
  input [6:0] in_0, in_1;
  output [6:0] z;
  wire ctl;
  wire [6:0] in_0, in_1;
  wire [6:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module mux_109(ctl, in_0, in_1, z);
  input [1:0] ctl;
  input [40:0] in_0, in_1;
  output [40:0] z;
  wire [1:0] ctl;
  wire [40:0] in_0, in_1;
  wire [40:0] z;
  CDN_mux2 g1(.sel0 (ctl[1]), .data0 (in_0[40]), .sel1 (ctl[0]), .data1
       (in_1[40]), .z (z[40]));
  CDN_mux2 g42(.sel0 (ctl[1]), .data0 (in_0[39]), .sel1 (ctl[0]),
       .data1 (in_1[39]), .z (z[39]));
  CDN_mux2 g43(.sel0 (ctl[1]), .data0 (in_0[38]), .sel1 (ctl[0]),
       .data1 (in_1[38]), .z (z[38]));
  CDN_mux2 g44(.sel0 (ctl[1]), .data0 (in_0[37]), .sel1 (ctl[0]),
       .data1 (in_1[37]), .z (z[37]));
  CDN_mux2 g45(.sel0 (ctl[1]), .data0 (in_0[36]), .sel1 (ctl[0]),
       .data1 (in_1[36]), .z (z[36]));
  CDN_mux2 g46(.sel0 (ctl[1]), .data0 (in_0[35]), .sel1 (ctl[0]),
       .data1 (in_1[35]), .z (z[35]));
  CDN_mux2 g47(.sel0 (ctl[1]), .data0 (in_0[34]), .sel1 (ctl[0]),
       .data1 (in_1[34]), .z (z[34]));
  CDN_mux2 g48(.sel0 (ctl[1]), .data0 (in_0[33]), .sel1 (ctl[0]),
       .data1 (in_1[33]), .z (z[33]));
  CDN_mux2 g49(.sel0 (ctl[1]), .data0 (in_0[32]), .sel1 (ctl[0]),
       .data1 (in_1[32]), .z (z[32]));
  CDN_mux2 g50(.sel0 (ctl[1]), .data0 (in_0[31]), .sel1 (ctl[0]),
       .data1 (in_1[31]), .z (z[31]));
  CDN_mux2 g51(.sel0 (ctl[1]), .data0 (in_0[30]), .sel1 (ctl[0]),
       .data1 (in_1[30]), .z (z[30]));
  CDN_mux2 g52(.sel0 (ctl[1]), .data0 (in_0[29]), .sel1 (ctl[0]),
       .data1 (in_1[29]), .z (z[29]));
  CDN_mux2 g53(.sel0 (ctl[1]), .data0 (in_0[28]), .sel1 (ctl[0]),
       .data1 (in_1[28]), .z (z[28]));
  CDN_mux2 g54(.sel0 (ctl[1]), .data0 (in_0[27]), .sel1 (ctl[0]),
       .data1 (in_1[27]), .z (z[27]));
  CDN_mux2 g55(.sel0 (ctl[1]), .data0 (in_0[26]), .sel1 (ctl[0]),
       .data1 (in_1[26]), .z (z[26]));
  CDN_mux2 g56(.sel0 (ctl[1]), .data0 (in_0[25]), .sel1 (ctl[0]),
       .data1 (in_1[25]), .z (z[25]));
  CDN_mux2 g57(.sel0 (ctl[1]), .data0 (in_0[24]), .sel1 (ctl[0]),
       .data1 (in_1[24]), .z (z[24]));
  CDN_mux2 g58(.sel0 (ctl[1]), .data0 (in_0[23]), .sel1 (ctl[0]),
       .data1 (in_1[23]), .z (z[23]));
  CDN_mux2 g59(.sel0 (ctl[1]), .data0 (in_0[22]), .sel1 (ctl[0]),
       .data1 (in_1[22]), .z (z[22]));
  CDN_mux2 g60(.sel0 (ctl[1]), .data0 (in_0[21]), .sel1 (ctl[0]),
       .data1 (in_1[21]), .z (z[21]));
  CDN_mux2 g61(.sel0 (ctl[1]), .data0 (in_0[20]), .sel1 (ctl[0]),
       .data1 (in_1[20]), .z (z[20]));
  CDN_mux2 g62(.sel0 (ctl[1]), .data0 (in_0[19]), .sel1 (ctl[0]),
       .data1 (in_1[19]), .z (z[19]));
  CDN_mux2 g63(.sel0 (ctl[1]), .data0 (in_0[18]), .sel1 (ctl[0]),
       .data1 (in_1[18]), .z (z[18]));
  CDN_mux2 g64(.sel0 (ctl[1]), .data0 (in_0[17]), .sel1 (ctl[0]),
       .data1 (in_1[17]), .z (z[17]));
  CDN_mux2 g65(.sel0 (ctl[1]), .data0 (in_0[16]), .sel1 (ctl[0]),
       .data1 (in_1[16]), .z (z[16]));
  CDN_mux2 g66(.sel0 (ctl[1]), .data0 (in_0[15]), .sel1 (ctl[0]),
       .data1 (in_1[15]), .z (z[15]));
  CDN_mux2 g67(.sel0 (ctl[1]), .data0 (in_0[14]), .sel1 (ctl[0]),
       .data1 (in_1[14]), .z (z[14]));
  CDN_mux2 g68(.sel0 (ctl[1]), .data0 (in_0[13]), .sel1 (ctl[0]),
       .data1 (in_1[13]), .z (z[13]));
  CDN_mux2 g69(.sel0 (ctl[1]), .data0 (in_0[12]), .sel1 (ctl[0]),
       .data1 (in_1[12]), .z (z[12]));
  CDN_mux2 g70(.sel0 (ctl[1]), .data0 (in_0[11]), .sel1 (ctl[0]),
       .data1 (in_1[11]), .z (z[11]));
  CDN_mux2 g71(.sel0 (ctl[1]), .data0 (in_0[10]), .sel1 (ctl[0]),
       .data1 (in_1[10]), .z (z[10]));
  CDN_mux2 g72(.sel0 (ctl[1]), .data0 (in_0[9]), .sel1 (ctl[0]), .data1
       (in_1[9]), .z (z[9]));
  CDN_mux2 g73(.sel0 (ctl[1]), .data0 (in_0[8]), .sel1 (ctl[0]), .data1
       (in_1[8]), .z (z[8]));
  CDN_mux2 g74(.sel0 (ctl[1]), .data0 (in_0[7]), .sel1 (ctl[0]), .data1
       (in_1[7]), .z (z[7]));
  CDN_mux2 g75(.sel0 (ctl[1]), .data0 (in_0[6]), .sel1 (ctl[0]), .data1
       (in_1[6]), .z (z[6]));
  CDN_mux2 g76(.sel0 (ctl[1]), .data0 (in_0[5]), .sel1 (ctl[0]), .data1
       (in_1[5]), .z (z[5]));
  CDN_mux2 g77(.sel0 (ctl[1]), .data0 (in_0[4]), .sel1 (ctl[0]), .data1
       (in_1[4]), .z (z[4]));
  CDN_mux2 g78(.sel0 (ctl[1]), .data0 (in_0[3]), .sel1 (ctl[0]), .data1
       (in_1[3]), .z (z[3]));
  CDN_mux2 g79(.sel0 (ctl[1]), .data0 (in_0[2]), .sel1 (ctl[0]), .data1
       (in_1[2]), .z (z[2]));
  CDN_mux2 g80(.sel0 (ctl[1]), .data0 (in_0[1]), .sel1 (ctl[0]), .data1
       (in_1[1]), .z (z[1]));
  CDN_mux2 g81(.sel0 (ctl[1]), .data0 (in_0[0]), .sel1 (ctl[0]), .data1
       (in_1[0]), .z (z[0]));
endmodule

module bmux_149(ctl, in_0, in_1, z);
  input ctl;
  input [15:0] in_0, in_1;
  output [15:0] z;
  wire ctl;
  wire [15:0] in_0, in_1;
  wire [15:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module mux_151(ctl, in_0, in_1, z);
  input [1:0] ctl;
  input [15:0] in_0, in_1;
  output [15:0] z;
  wire [1:0] ctl;
  wire [15:0] in_0, in_1;
  wire [15:0] z;
  CDN_mux2 g1(.sel0 (ctl[1]), .data0 (in_0[15]), .sel1 (ctl[0]), .data1
       (in_1[15]), .z (z[15]));
  CDN_mux2 g17(.sel0 (ctl[1]), .data0 (in_0[14]), .sel1 (ctl[0]),
       .data1 (in_1[14]), .z (z[14]));
  CDN_mux2 g18(.sel0 (ctl[1]), .data0 (in_0[13]), .sel1 (ctl[0]),
       .data1 (in_1[13]), .z (z[13]));
  CDN_mux2 g19(.sel0 (ctl[1]), .data0 (in_0[12]), .sel1 (ctl[0]),
       .data1 (in_1[12]), .z (z[12]));
  CDN_mux2 g20(.sel0 (ctl[1]), .data0 (in_0[11]), .sel1 (ctl[0]),
       .data1 (in_1[11]), .z (z[11]));
  CDN_mux2 g21(.sel0 (ctl[1]), .data0 (in_0[10]), .sel1 (ctl[0]),
       .data1 (in_1[10]), .z (z[10]));
  CDN_mux2 g22(.sel0 (ctl[1]), .data0 (in_0[9]), .sel1 (ctl[0]), .data1
       (in_1[9]), .z (z[9]));
  CDN_mux2 g23(.sel0 (ctl[1]), .data0 (in_0[8]), .sel1 (ctl[0]), .data1
       (in_1[8]), .z (z[8]));
  CDN_mux2 g24(.sel0 (ctl[1]), .data0 (in_0[7]), .sel1 (ctl[0]), .data1
       (in_1[7]), .z (z[7]));
  CDN_mux2 g25(.sel0 (ctl[1]), .data0 (in_0[6]), .sel1 (ctl[0]), .data1
       (in_1[6]), .z (z[6]));
  CDN_mux2 g26(.sel0 (ctl[1]), .data0 (in_0[5]), .sel1 (ctl[0]), .data1
       (in_1[5]), .z (z[5]));
  CDN_mux2 g27(.sel0 (ctl[1]), .data0 (in_0[4]), .sel1 (ctl[0]), .data1
       (in_1[4]), .z (z[4]));
  CDN_mux2 g28(.sel0 (ctl[1]), .data0 (in_0[3]), .sel1 (ctl[0]), .data1
       (in_1[3]), .z (z[3]));
  CDN_mux2 g29(.sel0 (ctl[1]), .data0 (in_0[2]), .sel1 (ctl[0]), .data1
       (in_1[2]), .z (z[2]));
  CDN_mux2 g30(.sel0 (ctl[1]), .data0 (in_0[1]), .sel1 (ctl[0]), .data1
       (in_1[1]), .z (z[1]));
  CDN_mux2 g31(.sel0 (ctl[1]), .data0 (in_0[0]), .sel1 (ctl[0]), .data1
       (in_1[0]), .z (z[0]));
endmodule

module mux_216(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, z);
  input [6:0] ctl;
  input in_0, in_1, in_2, in_3, in_4, in_5, in_6;
  output z;
  wire [6:0] ctl;
  wire in_0, in_1, in_2, in_3, in_4, in_5, in_6;
  wire z;
  CDN_mux7 g1(.sel0 (ctl[6]), .data0 (in_0), .sel1 (ctl[5]), .data1
       (in_1), .sel2 (ctl[4]), .data2 (in_2), .sel3 (ctl[3]), .data3
       (in_3), .sel4 (ctl[2]), .data4 (in_4), .sel5 (ctl[1]), .data5
       (in_5), .sel6 (ctl[0]), .data6 (in_6), .z (z));
endmodule

module raifes_dtm(tck, tms, tdi, tdo, dmi_addr, dmi_wdata, dmi_rdata,
     dmi_en, dmi_wen, dmi_error, dmi_dm_busy, adc_ctrl, adc_data,
     puf_ctrl, debug_state);
  input tck, tms, tdi, dmi_error, dmi_dm_busy;
  input [31:0] dmi_rdata;
  input [15:0] adc_data;
  output tdo, dmi_en, dmi_wen;
  output [6:0] dmi_addr;
  output [31:0] dmi_wdata, puf_ctrl;
  output [15:0] adc_ctrl;
  output [3:0] debug_state;
  wire tck, tms, tdi, dmi_error, dmi_dm_busy;
  wire [31:0] dmi_rdata;
  wire [15:0] adc_data;
  wire tdo, dmi_en, dmi_wen;
  wire [6:0] dmi_addr;
  wire [31:0] dmi_wdata, puf_ctrl;
  wire [15:0] adc_ctrl;
  wire [3:0] debug_state;
  wire [40:0] DMI;
  wire [3:0] next_state;
  wire [4:0] IR_shift;
  wire [31:0] IDCODE;
  wire [31:0] DTM;
  wire [15:0] ADCCTRL;
  wire [31:0] PUFCTRL;
  wire [15:0] ADCDATA;
  wire [4:0] IR;
  wire UNCONNECTED, UNCONNECTED0, n_288, n_289, n_290, n_291, n_292,
       n_293;
  wire n_294, n_295, n_296, n_297, n_298, n_299, n_300, n_301;
  wire n_302, n_303, n_304, n_305, n_306, n_307, n_308, n_309;
  wire n_310, n_311, n_312, n_313, n_314, n_315, n_316, n_317;
  wire n_318, n_319, n_320, n_321, n_322, n_324, n_325, n_326;
  wire n_327, n_328, n_329, n_330, n_331, n_332, n_333, n_334;
  wire n_335, n_336, n_337, n_338, n_339, n_340, n_341, n_342;
  wire n_343, n_344, n_345, n_346, n_347, n_348, n_349, n_350;
  wire n_351, n_352, n_353, n_354, n_355, n_356, n_357, n_358;
  wire n_359, n_360, n_361, n_362, n_363, n_364, n_365, n_366;
  wire n_367, n_368, n_369, n_370, n_371, n_372, n_373, n_374;
  wire n_375, n_376, n_377, n_378, n_379, n_380, n_381, n_382;
  wire n_383, n_384, n_385, n_386, n_387, n_388, n_389, n_390;
  wire n_391, n_392, n_393, n_396, n_397, n_398, n_399, n_400;
  wire n_401, n_402, n_403, n_404, n_405, n_406, n_407, n_408;
  wire n_409, n_410, n_411, n_412, n_413, n_414, n_415, n_416;
  wire n_417, n_418, n_419, n_420, n_421, n_422, n_423, n_424;
  wire n_425, n_426, n_427, n_428, n_429, n_430, n_431, n_432;
  wire n_433, n_434, n_435, n_436, n_437, n_438, n_439, n_440;
  wire n_441, n_442, n_443, n_444, n_445, n_446, n_447, n_448;
  wire n_449, n_450, n_451, n_452, n_453, n_454, n_455, n_456;
  wire n_457, n_458, n_459, n_460, n_461, n_504, n_505, n_506;
  wire n_507, n_508, n_509, n_510, n_511, n_512, n_513, n_514;
  wire n_515, n_516, n_517, n_518, n_519, n_520, n_521, n_522;
  wire n_523, n_524, n_525, n_526, n_527, n_528, n_529, n_530;
  wire n_531, n_532, n_533, n_534, n_535, n_536, n_537, n_538;
  wire n_539, n_540, n_541, n_542, n_543, n_544, n_545, n_546;
  wire n_547, n_548, n_549, n_550, n_551, n_552, n_553, n_554;
  wire n_555, n_556, n_557, n_558, n_559, n_560, n_561, n_562;
  wire n_563, n_564, n_565, n_566, n_567, n_568, n_569, n_570;
  wire n_571, n_572, n_573, n_574, n_575, n_576, n_577, n_578;
  wire n_579, n_580, n_581, n_582, n_583, n_584, n_585, n_586;
  wire n_589, n_590, n_591, n_592, n_593, n_594, n_595, n_596;
  wire n_597, n_598, n_599, n_600, n_601, n_602, n_603, n_604;
  wire n_605, n_606, n_607, n_608, n_609, n_610, n_611, n_612;
  wire n_613, n_614, n_615, n_616, n_617, n_618, n_619, n_620;
  wire n_621, n_624, n_625, n_626, n_627, n_628, n_629, n_630;
  wire n_631, n_632, n_633, n_634, n_635, n_636, n_637, n_638;
  wire n_639, n_640, n_641, n_642, n_643, n_644, n_645, n_646;
  wire n_647, n_648, n_649, n_650, n_651, n_652, n_653, n_654;
  wire n_655, n_656, n_657, n_658, n_659, n_660, n_661, n_662;
  wire n_663, n_664, n_665, n_666, n_667, n_668, n_669, n_670;
  wire n_671, n_672, n_673, n_674, n_675, n_676, n_677, n_678;
  wire n_679, n_680, n_681, n_682, n_683, n_684, n_685, n_686;
  wire n_687, n_688, n_707, n_708, n_709, n_710, n_711, n_712;
  wire n_713, n_714, n_715, n_716, n_717, n_718, n_719, n_720;
  wire n_721, n_722, n_723, n_724, n_725, n_726, n_727, n_728;
  wire n_729, n_730, n_731, n_732, n_733, n_734, n_735, n_736;
  wire n_737, n_738, n_739, n_740, n_741, n_742, n_743, n_744;
  wire n_745, n_746, n_747, n_748, n_749, n_783, n_784, n_785;
  wire n_786, n_787, n_788, n_789, n_790, n_792, n_793, n_794;
  wire n_795, n_796, n_797, n_798, n_799, n_800, n_801, n_802;
  wire n_803, n_804, n_805, n_806, n_807, n_808, n_809, n_810;
  wire n_811, n_812, n_813, n_814, n_815, n_816, n_817, n_818;
  wire n_819, n_820, n_821, n_822, n_823, n_825, n_829, n_830;
  wire n_831, n_832, n_833, n_834, n_836, n_837, n_838, n_839;
  wire n_840, n_841, n_842, n_843, n_844, n_845, n_846, n_847;
  wire n_848, n_849, n_850, n_851, n_852, n_853, n_854, n_855;
  wire n_856, n_857, n_858, n_859, n_860, n_861, n_862, n_863;
  wire n_864, n_865, n_866, n_867, n_868, n_869, n_870, n_871;
  wire n_872, n_873, n_874, n_875, n_877, n_878, n_879, n_880;
  wire n_881, n_882, n_883, n_884, n_885, n_886, n_887, n_888;
  wire n_889, n_890, n_891, n_892, n_893, n_894, n_895, n_896;
  wire n_897, n_898, n_899, n_900, n_901, n_902, n_903, n_904;
  wire n_905, n_906, n_907, n_908, n_910, n_911, n_912, n_913;
  wire n_914, n_915, n_916, n_917, n_918, n_919, n_920, n_921;
  wire n_922, n_923, n_924, n_925, n_926, n_927, n_928, n_929;
  wire n_930, n_931, n_932, n_933, n_934, n_935, n_936, n_937;
  wire n_938, n_939, n_940, n_941, n_942, n_943, n_944, n_945;
  wire n_946, n_947, n_948, n_949, n_950, n_952, n_953, n_954;
  wire n_955, n_956, n_957, n_958, n_959, n_960, n_961, n_962;
  wire n_963, n_964, n_965, n_966, n_967, n_969, n_970, n_971;
  wire n_972, n_973, n_974, n_975, n_976, n_977, n_978, n_979;
  wire n_980, n_981, n_982, n_983, n_984, n_986, n_987, n_988;
  wire n_989, n_990, n_991, n_992, n_993, n_994, n_995, n_996;
  wire n_997, n_998, n_999, n_1000, n_1001, n_1002, n_1003, n_1004;
  wire n_1005, n_1006, n_1007, n_1008, n_1009, n_1010, n_1011, n_1012;
  wire n_1013, n_1014, n_1015, n_1016, n_1070, n_1072, n_1073, n_1074;
  wire n_1081, n_1083, n_1084, n_1085, n_1091, n_1092, n_1131, n_1134;
  wire n_1135, n_1136, n_1137, n_1138, n_1139, n_1140, n_1141, n_1741;
  wire n_1747, n_1754, n_1761, n_1763, n_1765, n_1771, n_1778, n_1784;
  wire n_1874, n_1875, tck_neg, tdo_from_register, tdo_wire;
  or_op g3(.A (DMI[1:0]), .Z (n_749));
  bmux mux_90_47(.ctl (tms), .in_0 (1'b1), .in_1 (1'b0), .z (n_288));
  bmux_17 mux_91_45(.ctl (tms), .in_0 (2'b01), .in_1 (2'b10), .z
       ({n_294, n_289}));
  bmux_18 mux_92_45(.ctl (tms), .in_0 (3'b100), .in_1 (3'b011), .z
       ({n_304, n_295, n_290}));
  bmux_17 mux_93_45(.ctl (tms), .in_0 (2'b11), .in_1 (2'b00), .z
       ({n_305, n_291}));
  bmux_18 mux_94_42(.ctl (tms), .in_0 (3'b011), .in_1 (3'b100), .z
       ({n_314, n_306, n_296}));
  bmux_18 mux_95_42(.ctl (tms), .in_0 (3'b011), .in_1 (3'b100), .z
       ({n_315, n_307, n_297}));
  bmux_18 mux_96_40(.ctl (tms), .in_0 (3'b011), .in_1 (3'b100), .z
       ({n_316, n_308, n_298}));
  bmux_18 mux_97_40(.ctl (tms), .in_0 (3'b011), .in_1 (3'b100), .z
       ({n_317, n_309, n_299}));
  bmux mux_98_40(.ctl (tms), .in_0 (1'b0), .in_1 (1'b1), .z (n_310));
  bmux mux_99_40(.ctl (tms), .in_0 (1'b0), .in_1 (1'b1), .z (n_311));
  bmux_17 mux_100_40(.ctl (tms), .in_0 (2'b01), .in_1 (2'b10), .z
       ({n_312, n_300}));
  bmux_17 mux_101_40(.ctl (tms), .in_0 (2'b01), .in_1 (2'b10), .z
       ({n_313, n_301}));
  bmux mux_102_40(.ctl (tms), .in_0 (1'b0), .in_1 (1'b1), .z (n_318));
  bmux mux_103_40(.ctl (tms), .in_0 (1'b0), .in_1 (1'b1), .z (n_319));
  bmux_17 mux_104_41(.ctl (tms), .in_0 (2'b01), .in_1 (2'b10), .z
       ({n_302, n_292}));
  bmux_17 mux_105_41(.ctl (tms), .in_0 (2'b01), .in_1 (2'b10), .z
       ({n_303, n_293}));
  bmux_32 mux_next_state_89_7(.ctl (debug_state), .in_0 ({3'b000,
       n_288}), .in_1 ({2'b00, n_294, n_289}), .in_2 ({1'b0, n_304,
       n_295, n_290}), .in_3 ({1'b0, n_305, 1'b0, n_291}), .in_4
       ({n_314, n_306, n_296, 1'b0}), .in_5 ({n_315, n_307, n_297,
       1'b1}), .in_6 ({n_316, n_308, n_298, 1'b0}), .in_7 ({n_317,
       n_309, n_299, 1'b1}), .in_8 ({1'b1, n_310, 2'b10}), .in_9
       ({1'b1, n_311, 2'b11}), .in_10 ({1'b1, n_312, n_300, 1'b0}),
       .in_11 ({1'b1, n_313, n_301, 1'b1}), .in_12 ({n_318, 3'b110}),
       .in_13 ({n_319, 3'b111}), .in_14 ({2'b00, n_302, n_292}), .in_15
       ({2'b00, n_303, n_293}), .z (next_state));
  mux mux_IR_shift_150_6(.ctl ({n_321, n_322}), .in_0 (5'b00001), .in_1
       ({tdi, IR_shift[4:1]}), .z ({n_834, n_833, n_832, n_831,
       n_829}));
  mux mux_IR_159_6(.ctl ({n_324, n_325}), .in_0 (5'b00001), .in_1
       (IR_shift), .z ({n_841, n_840, n_839, n_838, n_836}));
  bmux_40 mux_169_30(.ctl (n_326), .in_0 (IDCODE), .in_1 ({tdi,
       IDCODE[31:1]}), .z ({n_391, n_389, n_387, n_385, n_383, n_381,
       n_379, n_377, n_375, n_373, n_371, n_369, n_367, n_365, n_363,
       n_361, n_359, n_357, n_355, n_353, n_351, n_349, n_347, n_345,
       n_343, n_341, n_339, n_337, n_335, n_333, n_331, n_329}));
  bmux_40 mux_171_17(.ctl (n_326), .in_0 (IDCODE), .in_1
       (32'b00010000000000000001000000000001), .z ({n_392, n_390,
       n_388, n_386, n_384, n_382, n_380, n_378, n_376, n_374, n_372,
       n_370, n_368, n_366, n_364, n_362, n_360, n_358, n_356, n_354,
       n_352, n_350, n_348, n_346, n_344, n_342, n_340, n_338, n_336,
       n_334, n_332, n_330}));
  mux_42 mux_IDCODE_168_6(.ctl ({n_327, n_328}), .in_0 ({n_391, n_389,
       n_387, n_385, n_383, n_381, n_379, n_377, n_375, n_373, n_371,
       n_369, n_367, n_365, n_363, n_361, n_359, n_357, n_355, n_353,
       n_351, n_349, n_347, n_345, n_343, n_341, n_339, n_337, n_335,
       n_333, n_331, n_329}), .in_1 ({n_392, n_390, n_388, n_386,
       n_384, n_382, n_380, n_378, n_376, n_374, n_372, n_370, n_368,
       n_366, n_364, n_362, n_360, n_358, n_356, n_354, n_352, n_350,
       n_348, n_346, n_344, n_342, n_340, n_338, n_336, n_334, n_332,
       n_330}), .z ({n_874, n_873, n_872, n_871, n_870, n_869, n_868,
       n_867, n_866, n_865, n_864, n_863, n_862, n_861, n_860, n_859,
       n_858, n_857, n_856, n_855, n_854, n_853, n_852, n_851, n_850,
       n_849, n_848, n_847, n_846, n_845, n_844, n_842}));
  bmux_40 mux_178_14(.ctl (n_393), .in_0 (DTM), .in_1 ({tdi,
       DTM[31:1]}), .z ({n_458, n_456, n_454, n_452, n_450, n_448,
       n_446, n_444, n_442, n_440, n_438, n_436, n_434, n_432, n_430,
       n_428, n_426, n_424, n_422, n_420, n_418, n_416, n_414, n_412,
       n_410, n_408, n_406, n_404, n_402, n_400, n_398, n_396}));
  bmux_40 mux_180_14(.ctl (n_393), .in_0 (DTM), .in_1
       (32'b00000000000000000010000001110001), .z ({n_459, n_457,
       n_455, n_453, n_451, n_449, n_447, n_445, n_443, n_441, n_439,
       n_437, n_435, n_433, n_431, n_429, n_427, n_425, n_423, n_421,
       n_419, n_417, n_415, n_413, n_411, n_409, n_407, n_405, n_403,
       n_401, n_399, n_397}));
  mux_42 mux_DTM_177_6(.ctl ({n_327, n_328}), .in_0 ({n_458, n_456,
       n_454, n_452, n_450, n_448, n_446, n_444, n_442, n_440, n_438,
       n_436, n_434, n_432, n_430, n_428, n_426, n_424, n_422, n_420,
       n_418, n_416, n_414, n_412, n_410, n_408, n_406, n_404, n_402,
       n_400, n_398, n_396}), .in_1 ({n_459, n_457, n_455, n_453,
       n_451, n_449, n_447, n_445, n_443, n_441, n_439, n_437, n_435,
       n_433, n_431, n_429, n_427, n_425, n_423, n_421, n_419, n_417,
       n_415, n_413, n_411, n_409, n_407, n_405, n_403, n_401, n_399,
       n_397}), .z ({n_907, n_906, n_905, n_904, n_903, n_902, n_901,
       n_900, n_899, n_898, n_897, n_896, n_895, n_894, n_893, n_892,
       n_891, n_890, n_889, n_888, n_887, n_886, n_885, n_884, n_883,
       n_882, n_881, n_880, n_879, n_878, n_877, n_875}));
  bmux_106 mux_187_14(.ctl (n_460), .in_0 (DMI), .in_1 ({tdi,
       DMI[40:1]}), .z ({n_584, n_582, n_580, n_578, n_576, n_574,
       n_572, n_570, n_568, n_566, n_564, n_562, n_560, n_558, n_556,
       n_554, n_552, n_550, n_548, n_546, n_544, n_542, n_540, n_538,
       n_536, n_534, n_532, n_530, n_528, n_526, n_524, n_522, n_520,
       n_518, n_516, n_514, n_512, n_510, n_508, n_506, n_504}));
  bmux_107 mux_dmi_addr_116_27(.ctl (n_461), .in_0 (dmi_addr), .in_1
       (DMI[40:34]), .z ({n_790, n_789, n_788, n_787, n_786, n_785,
       n_784}));
  bmux_106 mux_189_14(.ctl (n_460), .in_0 (DMI), .in_1 ({dmi_addr,
       dmi_rdata, dmi_error, dmi_error}), .z ({n_585, n_583, n_581,
       n_579, n_577, n_575, n_573, n_571, n_569, n_567, n_565, n_563,
       n_561, n_559, n_557, n_555, n_553, n_551, n_549, n_547, n_545,
       n_543, n_541, n_539, n_537, n_535, n_533, n_531, n_529, n_527,
       n_525, n_523, n_521, n_519, n_517, n_515, n_513, n_511, n_509,
       n_507, n_505}));
  mux_109 mux_DMI_186_6(.ctl ({n_327, n_328}), .in_0 ({n_584, n_582,
       n_580, n_578, n_576, n_574, n_572, n_570, n_568, n_566, n_564,
       n_562, n_560, n_558, n_556, n_554, n_552, n_550, n_548, n_546,
       n_544, n_542, n_540, n_538, n_536, n_534, n_532, n_530, n_528,
       n_526, n_524, n_522, n_520, n_518, n_516, n_514, n_512, n_510,
       n_508, n_506, n_504}), .in_1 ({n_585, n_583, n_581, n_579,
       n_577, n_575, n_573, n_571, n_569, n_567, n_565, n_563, n_561,
       n_559, n_557, n_555, n_553, n_551, n_549, n_547, n_545, n_543,
       n_541, n_539, n_537, n_535, n_533, n_531, n_529, n_527, n_525,
       n_523, n_521, n_519, n_517, n_515, n_513, n_511, n_509, n_507,
       n_505}), .z ({n_949, n_948, n_947, n_946, n_945, n_944, n_943,
       n_942, n_941, n_940, n_939, n_938, n_937, n_936, n_935, n_934,
       n_933, n_932, n_931, n_930, n_929, n_928, n_927, n_926, n_925,
       n_924, n_923, n_922, n_921, n_920, n_919, n_918, n_917, n_916,
       n_915, n_914, n_913, n_912, n_911, n_910, n_908}));
  bmux_149 mux_198_18(.ctl (n_586), .in_0 (ADCCTRL), .in_1 ({tdi,
       ADCCTRL[15:1]}), .z ({n_619, n_617, n_615, n_613, n_611, n_609,
       n_607, n_605, n_603, n_601, n_599, n_597, n_595, n_593, n_591,
       n_589}));
  bmux_149 mux_200_18(.ctl (n_586), .in_0 (ADCCTRL), .in_1
       (16'b1101111010101101), .z ({n_620, n_618, n_616, n_614, n_612,
       n_610, n_608, n_606, n_604, n_602, n_600, n_598, n_596, n_594,
       n_592, n_590}));
  mux_151 mux_ADCCTRL_197_6(.ctl ({n_327, n_328}), .in_0 ({n_619,
       n_617, n_615, n_613, n_611, n_609, n_607, n_605, n_603, n_601,
       n_599, n_597, n_595, n_593, n_591, n_589}), .in_1 ({n_620,
       n_618, n_616, n_614, n_612, n_610, n_608, n_606, n_604, n_602,
       n_600, n_598, n_596, n_594, n_592, n_590}), .z ({n_966, n_965,
       n_964, n_963, n_962, n_961, n_960, n_959, n_958, n_957, n_956,
       n_955, n_954, n_953, n_952, n_950}));
  bmux_40 mux_216_18(.ctl (n_621), .in_0 (PUFCTRL), .in_1 ({tdi,
       PUFCTRL[31:1]}), .z ({n_686, n_684, n_682, n_680, n_678, n_676,
       n_674, n_672, n_670, n_668, n_666, n_664, n_662, n_660, n_658,
       n_656, n_654, n_652, n_650, n_648, n_646, n_644, n_642, n_640,
       n_638, n_636, n_634, n_632, n_630, n_628, n_626, n_624}));
  bmux_40 mux_218_18(.ctl (n_621), .in_0 (PUFCTRL), .in_1
       (32'b11011110101011011011111011101111), .z ({n_687, n_685,
       n_683, n_681, n_679, n_677, n_675, n_673, n_671, n_669, n_667,
       n_665, n_663, n_661, n_659, n_657, n_655, n_653, n_651, n_649,
       n_647, n_645, n_643, n_641, n_639, n_637, n_635, n_633, n_631,
       n_629, n_627, n_625}));
  mux_42 mux_PUFCTRL_215_6(.ctl ({n_327, n_328}), .in_0 ({n_686, n_684,
       n_682, n_680, n_678, n_676, n_674, n_672, n_670, n_668, n_666,
       n_664, n_662, n_660, n_658, n_656, n_654, n_652, n_650, n_648,
       n_646, n_644, n_642, n_640, n_638, n_636, n_634, n_632, n_630,
       n_628, n_626, n_624}), .in_1 ({n_687, n_685, n_683, n_681,
       n_679, n_677, n_675, n_673, n_671, n_669, n_667, n_665, n_663,
       n_661, n_659, n_657, n_655, n_653, n_651, n_649, n_647, n_645,
       n_643, n_641, n_639, n_637, n_635, n_633, n_631, n_629, n_627,
       n_625}), .z ({n_1016, n_1015, n_1014, n_1013, n_1012, n_1011,
       n_1010, n_1009, n_1008, n_1007, n_1006, n_1005, n_1004, n_1003,
       n_1002, n_1001, n_1000, n_999, n_998, n_997, n_996, n_995,
       n_994, n_993, n_992, n_991, n_990, n_989, n_988, n_987, n_986,
       n_984}));
  bmux_149 mux_207_18(.ctl (n_688), .in_0 (ADCDATA), .in_1 ({tdi,
       ADCDATA[15:1]}), .z ({n_737, n_735, n_733, n_731, n_729, n_727,
       n_725, n_723, n_721, n_719, n_717, n_715, n_713, n_711, n_709,
       n_707}));
  bmux_149 mux_209_18(.ctl (n_688), .in_0 (ADCDATA), .in_1 (adc_data),
       .z ({n_738, n_736, n_734, n_732, n_730, n_728, n_726, n_724,
       n_722, n_720, n_718, n_716, n_714, n_712, n_710, n_708}));
  mux_151 mux_ADCDATA_206_6(.ctl ({n_327, n_328}), .in_0 ({n_737,
       n_735, n_733, n_731, n_729, n_727, n_725, n_723, n_721, n_719,
       n_717, n_715, n_713, n_711, n_709, n_707}), .in_1 ({n_738,
       n_736, n_734, n_732, n_730, n_728, n_726, n_724, n_722, n_720,
       n_718, n_716, n_714, n_712, n_710, n_708}), .z ({n_983, n_982,
       n_981, n_980, n_979, n_978, n_977, n_976, n_975, n_974, n_973,
       n_972, n_971, n_970, n_969, n_967}));
  mux_216 mux_tdo_from_register_229_7(.ctl ({n_739, n_740, n_741,
       n_742, n_743, n_744, n_746}), .in_0 (IDCODE[0]), .in_1 (DTM[0]),
       .in_2 (DMI[0]), .in_3 (ADCCTRL[0]), .in_4 (PUFCTRL[0]), .in_5
       (ADCDATA[0]), .in_6 (tdi), .z (tdo_from_register));
  bmux mux_241_26(.ctl (n_320), .in_0 (tdo_from_register), .in_1
       (IR_shift[0]), .z (tdo_wire));
  bmux mux_dmi_wen_116_27(.ctl (n_461), .in_0 (1'b0), .in_1 (DMI[1]),
       .z (UNCONNECTED));
  bmux mux_dmi_en_116_27(.ctl (n_461), .in_0 (1'b0), .in_1 (n_749), .z
       (UNCONNECTED0));
  bmux_40 mux_dmi_wdata_116_27(.ctl (n_461), .in_0 (dmi_wdata), .in_1
       (DMI[33:2]), .z ({n_823, n_822, n_821, n_820, n_819, n_818,
       n_817, n_816, n_815, n_814, n_813, n_812, n_811, n_810, n_809,
       n_808, n_807, n_806, n_805, n_804, n_803, n_802, n_801, n_800,
       n_799, n_798, n_797, n_796, n_795, n_794, n_793, n_792}));
  not g26 (n_825, n_461);
  not g31 (n_746, n_745);
  not g34 (tck_neg, tck);
  or g40 (n_830, n_322, n_321);
  or g41 (n_837, n_325, n_324);
  or g43 (n_843, n_328, n_327);
  nand g52 (n_1073, n_1070, debug_state[2], n_1072, debug_state[0]);
  nand g53 (n_1074, n_1070, debug_state[2], debug_state[1],
       debug_state[0]);
  not g54 (n_321, n_1073);
  not g55 (n_322, n_1074);
  not g57 (n_1072, debug_state[1]);
  nand g62 (n_1084, n_1070, n_1081, n_1072, n_1083);
  nand g63 (n_1085, debug_state[3], debug_state[2], debug_state[1],
       debug_state[0]);
  not g64 (n_324, n_1084);
  not g65 (n_325, n_1085);
  not g68 (n_1081, debug_state[2]);
  not g70 (n_1083, debug_state[0]);
  nand g74 (n_1091, n_1070, debug_state[2], debug_state[1], n_1083);
  nand g75 (n_1092, n_1070, debug_state[2], n_1072, n_1083);
  not g76 (n_327, n_1091);
  not g77 (n_328, n_1092);
  not g127 (n_1131, IR[2]);
  nand g130 (n_1137, n_1134, n_1135, n_1131, n_1136);
  not g131 (n_1138, IR[0]);
  nor g132 (n_739, n_1137, n_1138);
  nand g133 (n_1139, IR[4], n_1135, n_1131, n_1136);
  nor g134 (n_740, n_1139, IR[0]);
  nor g135 (n_741, n_1139, n_1138);
  nand g136 (n_1140, IR[4], IR[3], n_1131, n_1136);
  nor g137 (n_742, n_1140, IR[0]);
  nand g138 (n_1141, IR[4], IR[3], n_1131, IR[1]);
  nor g139 (n_743, n_1141, IR[0]);
  nor g140 (n_744, n_1140, n_1138);
  not g145 (n_1135, IR[3]);
  not g146 (n_1136, IR[1]);
  not g147 (n_1134, IR[4]);
  CDN_flop \state_reg[0] (.clk (tck), .d (next_state[0]), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (debug_state[0]));
  CDN_flop \state_reg[1] (.clk (tck), .d (next_state[1]), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (debug_state[1]));
  CDN_flop \state_reg[2] (.clk (tck), .d (next_state[2]), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (debug_state[2]));
  CDN_flop \state_reg[3] (.clk (tck), .d (next_state[3]), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (debug_state[3]));
  and g1 (n_461, n_783, n_460);
  CDN_flop \dmi_addr_reg[0] (.clk (tck_neg), .d (n_784), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_addr[0]));
  CDN_flop \dmi_addr_reg[1] (.clk (tck_neg), .d (n_785), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_addr[1]));
  CDN_flop \dmi_addr_reg[2] (.clk (tck_neg), .d (n_786), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_addr[2]));
  CDN_flop \dmi_addr_reg[3] (.clk (tck_neg), .d (n_787), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_addr[3]));
  CDN_flop \dmi_addr_reg[4] (.clk (tck_neg), .d (n_788), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_addr[4]));
  CDN_flop \dmi_addr_reg[5] (.clk (tck_neg), .d (n_789), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_addr[5]));
  CDN_flop \dmi_addr_reg[6] (.clk (tck_neg), .d (n_790), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_addr[6]));
  CDN_flop \dmi_wdata_reg[0] (.clk (tck_neg), .d (n_792), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[0]));
  CDN_flop \dmi_wdata_reg[1] (.clk (tck_neg), .d (n_793), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[1]));
  CDN_flop \dmi_wdata_reg[2] (.clk (tck_neg), .d (n_794), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[2]));
  CDN_flop \dmi_wdata_reg[3] (.clk (tck_neg), .d (n_795), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[3]));
  CDN_flop \dmi_wdata_reg[4] (.clk (tck_neg), .d (n_796), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[4]));
  CDN_flop \dmi_wdata_reg[5] (.clk (tck_neg), .d (n_797), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[5]));
  CDN_flop \dmi_wdata_reg[6] (.clk (tck_neg), .d (n_798), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[6]));
  CDN_flop \dmi_wdata_reg[7] (.clk (tck_neg), .d (n_799), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[7]));
  CDN_flop \dmi_wdata_reg[8] (.clk (tck_neg), .d (n_800), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[8]));
  CDN_flop \dmi_wdata_reg[9] (.clk (tck_neg), .d (n_801), .sena (1'b1),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[9]));
  CDN_flop \dmi_wdata_reg[10] (.clk (tck_neg), .d (n_802), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[10]));
  CDN_flop \dmi_wdata_reg[11] (.clk (tck_neg), .d (n_803), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[11]));
  CDN_flop \dmi_wdata_reg[12] (.clk (tck_neg), .d (n_804), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[12]));
  CDN_flop \dmi_wdata_reg[13] (.clk (tck_neg), .d (n_805), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[13]));
  CDN_flop \dmi_wdata_reg[14] (.clk (tck_neg), .d (n_806), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[14]));
  CDN_flop \dmi_wdata_reg[15] (.clk (tck_neg), .d (n_807), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[15]));
  CDN_flop \dmi_wdata_reg[16] (.clk (tck_neg), .d (n_808), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[16]));
  CDN_flop \dmi_wdata_reg[17] (.clk (tck_neg), .d (n_809), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[17]));
  CDN_flop \dmi_wdata_reg[18] (.clk (tck_neg), .d (n_810), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[18]));
  CDN_flop \dmi_wdata_reg[19] (.clk (tck_neg), .d (n_811), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[19]));
  CDN_flop \dmi_wdata_reg[20] (.clk (tck_neg), .d (n_812), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[20]));
  CDN_flop \dmi_wdata_reg[21] (.clk (tck_neg), .d (n_813), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[21]));
  CDN_flop \dmi_wdata_reg[22] (.clk (tck_neg), .d (n_814), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[22]));
  CDN_flop \dmi_wdata_reg[23] (.clk (tck_neg), .d (n_815), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[23]));
  CDN_flop \dmi_wdata_reg[24] (.clk (tck_neg), .d (n_816), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[24]));
  CDN_flop \dmi_wdata_reg[25] (.clk (tck_neg), .d (n_817), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[25]));
  CDN_flop \dmi_wdata_reg[26] (.clk (tck_neg), .d (n_818), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[26]));
  CDN_flop \dmi_wdata_reg[27] (.clk (tck_neg), .d (n_819), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[27]));
  CDN_flop \dmi_wdata_reg[28] (.clk (tck_neg), .d (n_820), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[28]));
  CDN_flop \dmi_wdata_reg[29] (.clk (tck_neg), .d (n_821), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[29]));
  CDN_flop \dmi_wdata_reg[30] (.clk (tck_neg), .d (n_822), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[30]));
  CDN_flop \dmi_wdata_reg[31] (.clk (tck_neg), .d (n_823), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (dmi_wdata[31]));
  CDN_flop dmi_en_reg(.clk (tck_neg), .d (n_749), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_825), .srd (1'b0), .q (dmi_en));
  CDN_flop dmi_wen_reg(.clk (tck_neg), .d (DMI[1]), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (n_825), .srd (1'b0), .q (dmi_wen));
  and g148 (n_748, n_783, n_586);
  CDN_flop \adc_ctrl_reg[0] (.clk (tck_neg), .d (ADCCTRL[0]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[0]));
  CDN_flop \adc_ctrl_reg[1] (.clk (tck_neg), .d (ADCCTRL[1]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[1]));
  CDN_flop \adc_ctrl_reg[2] (.clk (tck_neg), .d (ADCCTRL[2]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[2]));
  CDN_flop \adc_ctrl_reg[3] (.clk (tck_neg), .d (ADCCTRL[3]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[3]));
  CDN_flop \adc_ctrl_reg[4] (.clk (tck_neg), .d (ADCCTRL[4]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[4]));
  CDN_flop \adc_ctrl_reg[5] (.clk (tck_neg), .d (ADCCTRL[5]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[5]));
  CDN_flop \adc_ctrl_reg[6] (.clk (tck_neg), .d (ADCCTRL[6]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[6]));
  CDN_flop \adc_ctrl_reg[7] (.clk (tck_neg), .d (ADCCTRL[7]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[7]));
  CDN_flop \adc_ctrl_reg[8] (.clk (tck_neg), .d (ADCCTRL[8]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[8]));
  CDN_flop \adc_ctrl_reg[9] (.clk (tck_neg), .d (ADCCTRL[9]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[9]));
  CDN_flop \adc_ctrl_reg[10] (.clk (tck_neg), .d (ADCCTRL[10]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[10]));
  CDN_flop \adc_ctrl_reg[11] (.clk (tck_neg), .d (ADCCTRL[11]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[11]));
  CDN_flop \adc_ctrl_reg[12] (.clk (tck_neg), .d (ADCCTRL[12]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[12]));
  CDN_flop \adc_ctrl_reg[13] (.clk (tck_neg), .d (ADCCTRL[13]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[13]));
  CDN_flop \adc_ctrl_reg[14] (.clk (tck_neg), .d (ADCCTRL[14]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[14]));
  CDN_flop \adc_ctrl_reg[15] (.clk (tck_neg), .d (ADCCTRL[15]), .sena
       (n_748), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (adc_ctrl[15]));
  and g158 (n_747, n_783, n_621);
  CDN_flop \puf_ctrl_reg[0] (.clk (tck_neg), .d (PUFCTRL[0]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[0]));
  CDN_flop \puf_ctrl_reg[1] (.clk (tck_neg), .d (PUFCTRL[1]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[1]));
  CDN_flop \puf_ctrl_reg[2] (.clk (tck_neg), .d (PUFCTRL[2]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[2]));
  CDN_flop \puf_ctrl_reg[3] (.clk (tck_neg), .d (PUFCTRL[3]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[3]));
  CDN_flop \puf_ctrl_reg[4] (.clk (tck_neg), .d (PUFCTRL[4]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[4]));
  CDN_flop \puf_ctrl_reg[5] (.clk (tck_neg), .d (PUFCTRL[5]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[5]));
  CDN_flop \puf_ctrl_reg[6] (.clk (tck_neg), .d (PUFCTRL[6]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[6]));
  CDN_flop \puf_ctrl_reg[7] (.clk (tck_neg), .d (PUFCTRL[7]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[7]));
  CDN_flop \puf_ctrl_reg[8] (.clk (tck_neg), .d (PUFCTRL[8]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[8]));
  CDN_flop \puf_ctrl_reg[9] (.clk (tck_neg), .d (PUFCTRL[9]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[9]));
  CDN_flop \puf_ctrl_reg[10] (.clk (tck_neg), .d (PUFCTRL[10]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[10]));
  CDN_flop \puf_ctrl_reg[11] (.clk (tck_neg), .d (PUFCTRL[11]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[11]));
  CDN_flop \puf_ctrl_reg[12] (.clk (tck_neg), .d (PUFCTRL[12]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[12]));
  CDN_flop \puf_ctrl_reg[13] (.clk (tck_neg), .d (PUFCTRL[13]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[13]));
  CDN_flop \puf_ctrl_reg[14] (.clk (tck_neg), .d (PUFCTRL[14]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[14]));
  CDN_flop \puf_ctrl_reg[15] (.clk (tck_neg), .d (PUFCTRL[15]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[15]));
  CDN_flop \puf_ctrl_reg[16] (.clk (tck_neg), .d (PUFCTRL[16]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[16]));
  CDN_flop \puf_ctrl_reg[17] (.clk (tck_neg), .d (PUFCTRL[17]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[17]));
  CDN_flop \puf_ctrl_reg[18] (.clk (tck_neg), .d (PUFCTRL[18]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[18]));
  CDN_flop \puf_ctrl_reg[19] (.clk (tck_neg), .d (PUFCTRL[19]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[19]));
  CDN_flop \puf_ctrl_reg[20] (.clk (tck_neg), .d (PUFCTRL[20]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[20]));
  CDN_flop \puf_ctrl_reg[21] (.clk (tck_neg), .d (PUFCTRL[21]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[21]));
  CDN_flop \puf_ctrl_reg[22] (.clk (tck_neg), .d (PUFCTRL[22]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[22]));
  CDN_flop \puf_ctrl_reg[23] (.clk (tck_neg), .d (PUFCTRL[23]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[23]));
  CDN_flop \puf_ctrl_reg[24] (.clk (tck_neg), .d (PUFCTRL[24]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[24]));
  CDN_flop \puf_ctrl_reg[25] (.clk (tck_neg), .d (PUFCTRL[25]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[25]));
  CDN_flop \puf_ctrl_reg[26] (.clk (tck_neg), .d (PUFCTRL[26]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[26]));
  CDN_flop \puf_ctrl_reg[27] (.clk (tck_neg), .d (PUFCTRL[27]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[27]));
  CDN_flop \puf_ctrl_reg[28] (.clk (tck_neg), .d (PUFCTRL[28]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[28]));
  CDN_flop \puf_ctrl_reg[29] (.clk (tck_neg), .d (PUFCTRL[29]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[29]));
  CDN_flop \puf_ctrl_reg[30] (.clk (tck_neg), .d (PUFCTRL[30]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[30]));
  CDN_flop \puf_ctrl_reg[31] (.clk (tck_neg), .d (PUFCTRL[31]), .sena
       (n_747), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0),
       .q (puf_ctrl[31]));
  CDN_flop \IR_shift_reg[0] (.clk (tck), .d (n_829), .sena (n_830),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IR_shift[0]));
  CDN_flop \IR_shift_reg[1] (.clk (tck), .d (n_831), .sena (n_830),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IR_shift[1]));
  CDN_flop \IR_shift_reg[2] (.clk (tck), .d (n_832), .sena (n_830),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IR_shift[2]));
  CDN_flop \IR_shift_reg[3] (.clk (tck), .d (n_833), .sena (n_830),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IR_shift[3]));
  CDN_flop \IR_shift_reg[4] (.clk (tck), .d (n_834), .sena (n_830),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IR_shift[4]));
  CDN_flop \IR_reg[0] (.clk (tck_neg), .d (n_836), .sena (n_837), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IR[0]));
  CDN_flop \IR_reg[1] (.clk (tck_neg), .d (n_838), .sena (n_837), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IR[1]));
  CDN_flop \IR_reg[2] (.clk (tck_neg), .d (n_839), .sena (n_837), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IR[2]));
  CDN_flop \IR_reg[3] (.clk (tck_neg), .d (n_840), .sena (n_837), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IR[3]));
  CDN_flop \IR_reg[4] (.clk (tck_neg), .d (n_841), .sena (n_837), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IR[4]));
  CDN_flop \IDCODE_reg[0] (.clk (tck), .d (n_842), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[0]));
  CDN_flop \IDCODE_reg[1] (.clk (tck), .d (n_844), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[1]));
  CDN_flop \IDCODE_reg[2] (.clk (tck), .d (n_845), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[2]));
  CDN_flop \IDCODE_reg[3] (.clk (tck), .d (n_846), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[3]));
  CDN_flop \IDCODE_reg[4] (.clk (tck), .d (n_847), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[4]));
  CDN_flop \IDCODE_reg[5] (.clk (tck), .d (n_848), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[5]));
  CDN_flop \IDCODE_reg[6] (.clk (tck), .d (n_849), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[6]));
  CDN_flop \IDCODE_reg[7] (.clk (tck), .d (n_850), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[7]));
  CDN_flop \IDCODE_reg[8] (.clk (tck), .d (n_851), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[8]));
  CDN_flop \IDCODE_reg[9] (.clk (tck), .d (n_852), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (IDCODE[9]));
  CDN_flop \IDCODE_reg[10] (.clk (tck), .d (n_853), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[10]));
  CDN_flop \IDCODE_reg[11] (.clk (tck), .d (n_854), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[11]));
  CDN_flop \IDCODE_reg[12] (.clk (tck), .d (n_855), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[12]));
  CDN_flop \IDCODE_reg[13] (.clk (tck), .d (n_856), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[13]));
  CDN_flop \IDCODE_reg[14] (.clk (tck), .d (n_857), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[14]));
  CDN_flop \IDCODE_reg[15] (.clk (tck), .d (n_858), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[15]));
  CDN_flop \IDCODE_reg[16] (.clk (tck), .d (n_859), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[16]));
  CDN_flop \IDCODE_reg[17] (.clk (tck), .d (n_860), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[17]));
  CDN_flop \IDCODE_reg[18] (.clk (tck), .d (n_861), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[18]));
  CDN_flop \IDCODE_reg[19] (.clk (tck), .d (n_862), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[19]));
  CDN_flop \IDCODE_reg[20] (.clk (tck), .d (n_863), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[20]));
  CDN_flop \IDCODE_reg[21] (.clk (tck), .d (n_864), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[21]));
  CDN_flop \IDCODE_reg[22] (.clk (tck), .d (n_865), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[22]));
  CDN_flop \IDCODE_reg[23] (.clk (tck), .d (n_866), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[23]));
  CDN_flop \IDCODE_reg[24] (.clk (tck), .d (n_867), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[24]));
  CDN_flop \IDCODE_reg[25] (.clk (tck), .d (n_868), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[25]));
  CDN_flop \IDCODE_reg[26] (.clk (tck), .d (n_869), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[26]));
  CDN_flop \IDCODE_reg[27] (.clk (tck), .d (n_870), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[27]));
  CDN_flop \IDCODE_reg[28] (.clk (tck), .d (n_871), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[28]));
  CDN_flop \IDCODE_reg[29] (.clk (tck), .d (n_872), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[29]));
  CDN_flop \IDCODE_reg[30] (.clk (tck), .d (n_873), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[30]));
  CDN_flop \IDCODE_reg[31] (.clk (tck), .d (n_874), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (IDCODE[31]));
  CDN_flop \DTM_reg[0] (.clk (tck), .d (n_875), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[0]));
  CDN_flop \DTM_reg[1] (.clk (tck), .d (n_877), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[1]));
  CDN_flop \DTM_reg[2] (.clk (tck), .d (n_878), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[2]));
  CDN_flop \DTM_reg[3] (.clk (tck), .d (n_879), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[3]));
  CDN_flop \DTM_reg[4] (.clk (tck), .d (n_880), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[4]));
  CDN_flop \DTM_reg[5] (.clk (tck), .d (n_881), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[5]));
  CDN_flop \DTM_reg[6] (.clk (tck), .d (n_882), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[6]));
  CDN_flop \DTM_reg[7] (.clk (tck), .d (n_883), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[7]));
  CDN_flop \DTM_reg[8] (.clk (tck), .d (n_884), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[8]));
  CDN_flop \DTM_reg[9] (.clk (tck), .d (n_885), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[9]));
  CDN_flop \DTM_reg[10] (.clk (tck), .d (n_886), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[10]));
  CDN_flop \DTM_reg[11] (.clk (tck), .d (n_887), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[11]));
  CDN_flop \DTM_reg[12] (.clk (tck), .d (n_888), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[12]));
  CDN_flop \DTM_reg[13] (.clk (tck), .d (n_889), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[13]));
  CDN_flop \DTM_reg[14] (.clk (tck), .d (n_890), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[14]));
  CDN_flop \DTM_reg[15] (.clk (tck), .d (n_891), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[15]));
  CDN_flop \DTM_reg[16] (.clk (tck), .d (n_892), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[16]));
  CDN_flop \DTM_reg[17] (.clk (tck), .d (n_893), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[17]));
  CDN_flop \DTM_reg[18] (.clk (tck), .d (n_894), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[18]));
  CDN_flop \DTM_reg[19] (.clk (tck), .d (n_895), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[19]));
  CDN_flop \DTM_reg[20] (.clk (tck), .d (n_896), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[20]));
  CDN_flop \DTM_reg[21] (.clk (tck), .d (n_897), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[21]));
  CDN_flop \DTM_reg[22] (.clk (tck), .d (n_898), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[22]));
  CDN_flop \DTM_reg[23] (.clk (tck), .d (n_899), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[23]));
  CDN_flop \DTM_reg[24] (.clk (tck), .d (n_900), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[24]));
  CDN_flop \DTM_reg[25] (.clk (tck), .d (n_901), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[25]));
  CDN_flop \DTM_reg[26] (.clk (tck), .d (n_902), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[26]));
  CDN_flop \DTM_reg[27] (.clk (tck), .d (n_903), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[27]));
  CDN_flop \DTM_reg[28] (.clk (tck), .d (n_904), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[28]));
  CDN_flop \DTM_reg[29] (.clk (tck), .d (n_905), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[29]));
  CDN_flop \DTM_reg[30] (.clk (tck), .d (n_906), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[30]));
  CDN_flop \DTM_reg[31] (.clk (tck), .d (n_907), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DTM[31]));
  CDN_flop \DMI_reg[0] (.clk (tck), .d (n_908), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[0]));
  CDN_flop \DMI_reg[1] (.clk (tck), .d (n_910), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[1]));
  CDN_flop \DMI_reg[2] (.clk (tck), .d (n_911), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[2]));
  CDN_flop \DMI_reg[3] (.clk (tck), .d (n_912), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[3]));
  CDN_flop \DMI_reg[4] (.clk (tck), .d (n_913), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[4]));
  CDN_flop \DMI_reg[5] (.clk (tck), .d (n_914), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[5]));
  CDN_flop \DMI_reg[6] (.clk (tck), .d (n_915), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[6]));
  CDN_flop \DMI_reg[7] (.clk (tck), .d (n_916), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[7]));
  CDN_flop \DMI_reg[8] (.clk (tck), .d (n_917), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[8]));
  CDN_flop \DMI_reg[9] (.clk (tck), .d (n_918), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[9]));
  CDN_flop \DMI_reg[10] (.clk (tck), .d (n_919), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[10]));
  CDN_flop \DMI_reg[11] (.clk (tck), .d (n_920), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[11]));
  CDN_flop \DMI_reg[12] (.clk (tck), .d (n_921), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[12]));
  CDN_flop \DMI_reg[13] (.clk (tck), .d (n_922), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[13]));
  CDN_flop \DMI_reg[14] (.clk (tck), .d (n_923), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[14]));
  CDN_flop \DMI_reg[15] (.clk (tck), .d (n_924), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[15]));
  CDN_flop \DMI_reg[16] (.clk (tck), .d (n_925), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[16]));
  CDN_flop \DMI_reg[17] (.clk (tck), .d (n_926), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[17]));
  CDN_flop \DMI_reg[18] (.clk (tck), .d (n_927), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[18]));
  CDN_flop \DMI_reg[19] (.clk (tck), .d (n_928), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[19]));
  CDN_flop \DMI_reg[20] (.clk (tck), .d (n_929), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[20]));
  CDN_flop \DMI_reg[21] (.clk (tck), .d (n_930), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[21]));
  CDN_flop \DMI_reg[22] (.clk (tck), .d (n_931), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[22]));
  CDN_flop \DMI_reg[23] (.clk (tck), .d (n_932), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[23]));
  CDN_flop \DMI_reg[24] (.clk (tck), .d (n_933), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[24]));
  CDN_flop \DMI_reg[25] (.clk (tck), .d (n_934), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[25]));
  CDN_flop \DMI_reg[26] (.clk (tck), .d (n_935), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[26]));
  CDN_flop \DMI_reg[27] (.clk (tck), .d (n_936), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[27]));
  CDN_flop \DMI_reg[28] (.clk (tck), .d (n_937), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[28]));
  CDN_flop \DMI_reg[29] (.clk (tck), .d (n_938), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[29]));
  CDN_flop \DMI_reg[30] (.clk (tck), .d (n_939), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[30]));
  CDN_flop \DMI_reg[31] (.clk (tck), .d (n_940), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[31]));
  CDN_flop \DMI_reg[32] (.clk (tck), .d (n_941), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[32]));
  CDN_flop \DMI_reg[33] (.clk (tck), .d (n_942), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[33]));
  CDN_flop \DMI_reg[34] (.clk (tck), .d (n_943), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[34]));
  CDN_flop \DMI_reg[35] (.clk (tck), .d (n_944), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[35]));
  CDN_flop \DMI_reg[36] (.clk (tck), .d (n_945), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[36]));
  CDN_flop \DMI_reg[37] (.clk (tck), .d (n_946), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[37]));
  CDN_flop \DMI_reg[38] (.clk (tck), .d (n_947), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[38]));
  CDN_flop \DMI_reg[39] (.clk (tck), .d (n_948), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[39]));
  CDN_flop \DMI_reg[40] (.clk (tck), .d (n_949), .sena (n_843), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (DMI[40]));
  CDN_flop \ADCCTRL_reg[0] (.clk (tck), .d (n_950), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[0]));
  CDN_flop \ADCCTRL_reg[1] (.clk (tck), .d (n_952), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[1]));
  CDN_flop \ADCCTRL_reg[2] (.clk (tck), .d (n_953), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[2]));
  CDN_flop \ADCCTRL_reg[3] (.clk (tck), .d (n_954), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[3]));
  CDN_flop \ADCCTRL_reg[4] (.clk (tck), .d (n_955), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[4]));
  CDN_flop \ADCCTRL_reg[5] (.clk (tck), .d (n_956), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[5]));
  CDN_flop \ADCCTRL_reg[6] (.clk (tck), .d (n_957), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[6]));
  CDN_flop \ADCCTRL_reg[7] (.clk (tck), .d (n_958), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[7]));
  CDN_flop \ADCCTRL_reg[8] (.clk (tck), .d (n_959), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[8]));
  CDN_flop \ADCCTRL_reg[9] (.clk (tck), .d (n_960), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[9]));
  CDN_flop \ADCCTRL_reg[10] (.clk (tck), .d (n_961), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[10]));
  CDN_flop \ADCCTRL_reg[11] (.clk (tck), .d (n_962), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[11]));
  CDN_flop \ADCCTRL_reg[12] (.clk (tck), .d (n_963), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[12]));
  CDN_flop \ADCCTRL_reg[13] (.clk (tck), .d (n_964), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[13]));
  CDN_flop \ADCCTRL_reg[14] (.clk (tck), .d (n_965), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[14]));
  CDN_flop \ADCCTRL_reg[15] (.clk (tck), .d (n_966), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCCTRL[15]));
  CDN_flop \ADCDATA_reg[0] (.clk (tck), .d (n_967), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[0]));
  CDN_flop \ADCDATA_reg[1] (.clk (tck), .d (n_969), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[1]));
  CDN_flop \ADCDATA_reg[2] (.clk (tck), .d (n_970), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[2]));
  CDN_flop \ADCDATA_reg[3] (.clk (tck), .d (n_971), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[3]));
  CDN_flop \ADCDATA_reg[4] (.clk (tck), .d (n_972), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[4]));
  CDN_flop \ADCDATA_reg[5] (.clk (tck), .d (n_973), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[5]));
  CDN_flop \ADCDATA_reg[6] (.clk (tck), .d (n_974), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[6]));
  CDN_flop \ADCDATA_reg[7] (.clk (tck), .d (n_975), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[7]));
  CDN_flop \ADCDATA_reg[8] (.clk (tck), .d (n_976), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[8]));
  CDN_flop \ADCDATA_reg[9] (.clk (tck), .d (n_977), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[9]));
  CDN_flop \ADCDATA_reg[10] (.clk (tck), .d (n_978), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[10]));
  CDN_flop \ADCDATA_reg[11] (.clk (tck), .d (n_979), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[11]));
  CDN_flop \ADCDATA_reg[12] (.clk (tck), .d (n_980), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[12]));
  CDN_flop \ADCDATA_reg[13] (.clk (tck), .d (n_981), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[13]));
  CDN_flop \ADCDATA_reg[14] (.clk (tck), .d (n_982), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[14]));
  CDN_flop \ADCDATA_reg[15] (.clk (tck), .d (n_983), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (ADCDATA[15]));
  CDN_flop \PUFCTRL_reg[0] (.clk (tck), .d (n_984), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[0]));
  CDN_flop \PUFCTRL_reg[1] (.clk (tck), .d (n_986), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[1]));
  CDN_flop \PUFCTRL_reg[2] (.clk (tck), .d (n_987), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[2]));
  CDN_flop \PUFCTRL_reg[3] (.clk (tck), .d (n_988), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[3]));
  CDN_flop \PUFCTRL_reg[4] (.clk (tck), .d (n_989), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[4]));
  CDN_flop \PUFCTRL_reg[5] (.clk (tck), .d (n_990), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[5]));
  CDN_flop \PUFCTRL_reg[6] (.clk (tck), .d (n_991), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[6]));
  CDN_flop \PUFCTRL_reg[7] (.clk (tck), .d (n_992), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[7]));
  CDN_flop \PUFCTRL_reg[8] (.clk (tck), .d (n_993), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[8]));
  CDN_flop \PUFCTRL_reg[9] (.clk (tck), .d (n_994), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[9]));
  CDN_flop \PUFCTRL_reg[10] (.clk (tck), .d (n_995), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[10]));
  CDN_flop \PUFCTRL_reg[11] (.clk (tck), .d (n_996), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[11]));
  CDN_flop \PUFCTRL_reg[12] (.clk (tck), .d (n_997), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[12]));
  CDN_flop \PUFCTRL_reg[13] (.clk (tck), .d (n_998), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[13]));
  CDN_flop \PUFCTRL_reg[14] (.clk (tck), .d (n_999), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[14]));
  CDN_flop \PUFCTRL_reg[15] (.clk (tck), .d (n_1000), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[15]));
  CDN_flop \PUFCTRL_reg[16] (.clk (tck), .d (n_1001), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[16]));
  CDN_flop \PUFCTRL_reg[17] (.clk (tck), .d (n_1002), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[17]));
  CDN_flop \PUFCTRL_reg[18] (.clk (tck), .d (n_1003), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[18]));
  CDN_flop \PUFCTRL_reg[19] (.clk (tck), .d (n_1004), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[19]));
  CDN_flop \PUFCTRL_reg[20] (.clk (tck), .d (n_1005), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[20]));
  CDN_flop \PUFCTRL_reg[21] (.clk (tck), .d (n_1006), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[21]));
  CDN_flop \PUFCTRL_reg[22] (.clk (tck), .d (n_1007), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[22]));
  CDN_flop \PUFCTRL_reg[23] (.clk (tck), .d (n_1008), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[23]));
  CDN_flop \PUFCTRL_reg[24] (.clk (tck), .d (n_1009), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[24]));
  CDN_flop \PUFCTRL_reg[25] (.clk (tck), .d (n_1010), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[25]));
  CDN_flop \PUFCTRL_reg[26] (.clk (tck), .d (n_1011), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[26]));
  CDN_flop \PUFCTRL_reg[27] (.clk (tck), .d (n_1012), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[27]));
  CDN_flop \PUFCTRL_reg[28] (.clk (tck), .d (n_1013), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[28]));
  CDN_flop \PUFCTRL_reg[29] (.clk (tck), .d (n_1014), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[29]));
  CDN_flop \PUFCTRL_reg[30] (.clk (tck), .d (n_1015), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[30]));
  CDN_flop \PUFCTRL_reg[31] (.clk (tck), .d (n_1016), .sena (n_843),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (PUFCTRL[31]));
  CDN_flop tdo_r_reg(.clk (tck_neg), .d (tdo_wire), .sena (1'b1), .aclr
       (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (tdo));
  nand g365 (n_1741, n_1083, debug_state[1], debug_state[2],
       debug_state[3]);
  not g366 (n_783, n_1741);
  nand g372 (n_1747, IR[0], n_1136, n_1131, n_1135);
  nor g374 (n_460, n_1747, n_1134);
  nand g380 (n_1754, n_1138, n_1136, n_1131, IR[3]);
  nor g382 (n_586, n_1754, n_1134);
  nand g388 (n_1761, n_1138, IR[1], n_1131, IR[3]);
  nor g390 (n_621, n_1761, n_1134);
  nor g392 (n_1763, IR[4], IR[3], IR[2], IR[1]);
  nand g393 (n_1765, n_1763, IR[0]);
  not g394 (n_326, n_1765);
  nand g400 (n_1771, n_1138, n_1136, n_1131, n_1135);
  nor g402 (n_393, n_1771, n_1134);
  nand g408 (n_1778, IR[0], n_1136, n_1131, IR[3]);
  nor g410 (n_688, n_1778, n_1134);
  not g414 (n_1070, debug_state[3]);
  nand g415 (n_1784, n_1070, debug_state[0], debug_state[1],
       debug_state[2]);
  not g416 (n_320, n_1784);
  or g417 (n_1874, n_739, n_740);
  or g418 (n_1875, n_741, n_742);
  or g419 (n_745, n_743, n_744, n_1874, n_1875);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux2(sel0, data0, sel1, data1, z);
  input sel0, data0, sel1, data1;
  output z;
  wire sel0, data0, sel1, data1;
  reg  z;
  always 
    @(sel0 or sel1 or data0 or data1) 
      case ({sel0, sel1})
       2'b10: z = data0;
       2'b01: z = data1;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux2(sel0, data0, sel1, data1, z);
  input sel0, data0, sel1, data1;
  output z;
  wire sel0, data0, sel1, data1;
  wire z;
  wire w_0, w_1;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux7(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or sel4 or sel5 or sel6 or data0 or
         data1 or data2 or data3 or data4 or data5 or data6) 
      case ({sel0, sel1, sel2, sel3, sel4, sel5, sel6})
       7'b1000000: z = data0;
       7'b0100000: z = data1;
       7'b0010000: z = data2;
       7'b0001000: z = data3;
       7'b0000100: z = data4;
       7'b0000010: z = data5;
       7'b0000001: z = data6;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux7(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6;
  wire z;
  wire w_0, w_1, w_2, w_3, w_4, w_5, w_6;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  and a_4 (w_4, sel4, data4);
  and a_5 (w_5, sel5, data5);
  and a_6 (w_6, sel6, data6);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux16(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, sel3, data8, data9, data10, data11, data12,
     data13, data14, data15, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or data0 or data1 or data2 or data3
         or data4 or data5 or data6 or data7 or data8 or data9 or
         data10 or data11 or data12 or data13 or data14 or data15) 
      case ({sel0, sel1, sel2, sel3})
       4'b0000: z = data0;
       4'b1000: z = data1;
       4'b0100: z = data2;
       4'b1100: z = data3;
       4'b0010: z = data4;
       4'b1010: z = data5;
       4'b0110: z = data6;
       4'b1110: z = data7;
       4'b0001: z = data8;
       4'b1001: z = data9;
       4'b0101: z = data10;
       4'b1101: z = data11;
       4'b0011: z = data12;
       4'b1011: z = data13;
       4'b0111: z = data14;
       4'b1111: z = data15;
      endcase
endmodule
`else
module CDN_bmux16(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, sel3, data8, data9, data10, data11, data12,
     data13, data14, data15, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7, sel3, data8, data9, data10, data11, data12,
       data13, data14, data15;
  wire z;
  wire inv_sel0, inv_sel1, inv_sel2, inv_sel3, w_0, w_1, w_2, w_3;
  wire w_4, w_5, w_6, w_7, w_8, w_9, w_10, w_11;
  wire w_12, w_13, w_14, w_15;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  not i_2 (inv_sel2, sel2);
  not i_3 (inv_sel3, sel3);
  and a_0 (w_0, inv_sel3, inv_sel2, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel3, inv_sel2, inv_sel1, sel0, data1);
  and a_2 (w_2, inv_sel3, inv_sel2, sel1, inv_sel0, data2);
  and a_3 (w_3, inv_sel3, inv_sel2, sel1, sel0, data3);
  and a_4 (w_4, inv_sel3, sel2, inv_sel1, inv_sel0, data4);
  and a_5 (w_5, inv_sel3, sel2, inv_sel1, sel0, data5);
  and a_6 (w_6, inv_sel3, sel2, sel1, inv_sel0, data6);
  and a_7 (w_7, inv_sel3, sel2, sel1, sel0, data7);
  and a_8 (w_8, sel3, inv_sel2, inv_sel1, inv_sel0, data8);
  and a_9 (w_9, sel3, inv_sel2, inv_sel1, sel0, data9);
  and a_10 (w_10, sel3, inv_sel2, sel1, inv_sel0, data10);
  and a_11 (w_11, sel3, inv_sel2, sel1, sel0, data11);
  and a_12 (w_12, sel3, sel2, inv_sel1, inv_sel0, data12);
  and a_13 (w_13, sel3, sel2, inv_sel1, sel0, data13);
  and a_14 (w_14, sel3, sel2, sel1, inv_sel0, data14);
  and a_15 (w_15, sel3, sel2, sel1, sel0, data15);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7, w_8, w_9, w_10,
       w_11, w_12, w_13, w_14, w_15);
endmodule
`endif // ONE_HOT_MUX
`endif
