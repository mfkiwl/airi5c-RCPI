
// Generated by Cadence Genus(TM) Synthesis Solution 17.22-s017_1
// Generated on: Nov  8 2018 13:47:48 CET (Nov  8 2018 12:47:48 UTC)

// Verification Directory fv/permut_sel_aio 

module or_op_17(A, B, Z);
  input [7:0] A, B;
  output [7:0] Z;
  wire [7:0] A, B;
  wire [7:0] Z;
  or g1 (Z[0], A[0], B[0]);
  or g2 (Z[1], A[1], B[1]);
  or g3 (Z[2], A[2], B[2]);
  or g4 (Z[3], A[3], B[3]);
  or g5 (Z[4], A[4], B[4]);
  or g6 (Z[5], A[5], B[5]);
  or g7 (Z[6], A[6], B[6]);
  or g8 (Z[7], A[7], B[7]);
endmodule

module lt_unsigned(A, B, Z);
  input [15:0] A, B;
  output Z;
  wire [15:0] A, B;
  wire Z;
  wire n_52, n_53, n_54, n_55, n_56, n_57, n_58, n_59;
  wire n_60, n_61, n_62, n_63, n_64, n_65, n_66, n_68;
  wire n_69, n_71, n_72, n_73, n_74, n_75, n_76, n_77;
  wire n_78, n_79, n_80, n_81, n_82, n_83, n_84, n_85;
  wire n_86, n_87, n_88, n_89, n_90, n_91, n_92, n_93;
  wire n_94, n_95, n_96, n_97, n_98, n_99, n_100, n_101;
  wire n_102, n_103, n_104, n_105, n_106, n_107, n_108, n_109;
  wire n_110, n_111, n_112, n_113, n_114, n_115, n_116, n_117;
  wire n_118, n_121, n_122, n_123, n_124, n_127, n_129, n_130;
  wire n_131, n_132, n_133, n_134, n_137, n_139, n_140, n_141;
  wire n_142, n_143, n_144, n_147, n_149, n_150, n_151, n_152;
  wire n_153, n_154, n_162, n_163, n_164, n_165, n_166, n_169;
  wire n_177, n_178, n_179, n_180, n_181, n_200, n_201, n_202;
  not g2 (n_52, B[15]);
  not g3 (n_53, B[14]);
  not g4 (n_54, B[13]);
  not g5 (n_55, B[12]);
  not g6 (n_56, B[11]);
  not g7 (n_57, B[10]);
  not g8 (n_58, B[9]);
  not g9 (n_59, B[8]);
  not g10 (n_60, B[7]);
  not g11 (n_61, B[6]);
  not g12 (n_62, B[5]);
  not g13 (n_63, B[4]);
  not g14 (n_64, B[3]);
  not g15 (n_65, B[2]);
  not g16 (n_66, B[1]);
  not g18 (Z, n_68);
  nand g22 (n_72, n_69, B[0]);
  nor g23 (n_71, A[1], n_66);
  nand g24 (n_74, A[1], n_66);
  nor g25 (n_81, A[2], n_65);
  nand g26 (n_76, A[2], n_65);
  nor g27 (n_77, A[3], n_64);
  nand g28 (n_78, A[3], n_64);
  nor g29 (n_87, A[4], n_63);
  nand g30 (n_82, A[4], n_63);
  nor g31 (n_83, A[5], n_62);
  nand g32 (n_84, A[5], n_62);
  nor g33 (n_93, A[6], n_61);
  nand g34 (n_88, A[6], n_61);
  nor g35 (n_89, A[7], n_60);
  nand g36 (n_90, A[7], n_60);
  nor g37 (n_99, A[8], n_59);
  nand g38 (n_94, A[8], n_59);
  nor g39 (n_95, A[9], n_58);
  nand g40 (n_96, A[9], n_58);
  nor g41 (n_105, A[10], n_57);
  nand g42 (n_100, A[10], n_57);
  nor g43 (n_101, A[11], n_56);
  nand g44 (n_102, A[11], n_56);
  nor g45 (n_111, A[12], n_55);
  nand g46 (n_106, A[12], n_55);
  nor g47 (n_107, A[13], n_54);
  nand g48 (n_108, A[13], n_54);
  nor g49 (n_117, A[14], n_53);
  nand g50 (n_112, A[14], n_53);
  nor g51 (n_113, A[15], n_52);
  nand g52 (n_114, A[15], n_52);
  not g53 (n_73, n_71);
  nand g54 (n_75, n_72, n_73);
  nand g55 (n_118, n_74, n_75);
  nor g56 (n_79, n_76, n_77);
  not g57 (n_80, n_78);
  nor g58 (n_122, n_79, n_80);
  nor g59 (n_121, n_81, n_77);
  nor g60 (n_85, n_82, n_83);
  not g61 (n_86, n_84);
  nor g62 (n_124, n_85, n_86);
  nor g63 (n_127, n_87, n_83);
  nor g64 (n_91, n_88, n_89);
  not g65 (n_92, n_90);
  nor g66 (n_131, n_91, n_92);
  nor g67 (n_129, n_93, n_89);
  nor g68 (n_97, n_94, n_95);
  not g69 (n_98, n_96);
  nor g70 (n_134, n_97, n_98);
  nor g71 (n_137, n_99, n_95);
  nor g72 (n_103, n_100, n_101);
  not g73 (n_104, n_102);
  nor g74 (n_141, n_103, n_104);
  nor g75 (n_139, n_105, n_101);
  nor g76 (n_109, n_106, n_107);
  not g77 (n_110, n_108);
  nor g78 (n_144, n_109, n_110);
  nor g79 (n_147, n_111, n_107);
  nor g80 (n_115, n_112, n_113);
  not g81 (n_116, n_114);
  nor g82 (n_151, n_115, n_116);
  nor g83 (n_149, n_117, n_113);
  nand g87 (n_123, n_121, n_118);
  nand g88 (n_154, n_122, n_123);
  not g94 (n_130, n_129);
  nor g95 (n_132, n_124, n_130);
  not g96 (n_133, n_131);
  nor g97 (n_164, n_132, n_133);
  nand g98 (n_162, n_127, n_129);
  not g104 (n_140, n_139);
  nor g105 (n_142, n_134, n_140);
  not g106 (n_143, n_141);
  nor g107 (n_166, n_142, n_143);
  nand g108 (n_169, n_137, n_139);
  not g114 (n_150, n_149);
  nor g115 (n_152, n_144, n_150);
  not g116 (n_153, n_151);
  nor g117 (n_178, n_152, n_153);
  nand g118 (n_177, n_147, n_149);
  not g127 (n_163, n_162);
  nand g128 (n_165, n_154, n_163);
  nand g129 (n_181, n_164, n_165);
  nor g143 (n_179, n_177, n_166);
  not g144 (n_180, n_178);
  nor g145 (n_201, n_179, n_180);
  nor g146 (n_200, n_169, n_177);
  nand g164 (n_202, n_200, n_181);
  nand g165 (n_68, n_201, n_202);
  not g205 (n_69, A[0]);
endmodule

module lt_unsigned_4(A, B, Z);
  input [3:0] A, B;
  output Z;
  wire [3:0] A, B;
  wire Z;
  wire n_16, n_17, n_18, n_20, n_21, n_23, n_24, n_25;
  wire n_26, n_27, n_28, n_29, n_30, n_31, n_32, n_33;
  wire n_34, n_37, n_38, n_39;
  not g2 (n_16, B[3]);
  not g3 (n_17, B[2]);
  not g4 (n_18, B[1]);
  not g6 (Z, n_20);
  nand g10 (n_24, n_21, B[0]);
  nor g11 (n_23, A[1], n_18);
  nand g12 (n_26, A[1], n_18);
  nor g13 (n_33, A[2], n_17);
  nand g14 (n_28, A[2], n_17);
  nor g15 (n_29, A[3], n_16);
  nand g16 (n_30, A[3], n_16);
  not g17 (n_25, n_23);
  nand g18 (n_27, n_24, n_25);
  nand g19 (n_34, n_26, n_27);
  nor g20 (n_31, n_28, n_29);
  not g21 (n_32, n_30);
  nor g22 (n_38, n_31, n_32);
  nor g23 (n_37, n_33, n_29);
  nand g27 (n_39, n_37, n_34);
  nand g28 (n_20, n_38, n_39);
  not g37 (n_21, A[0]);
endmodule

module lt_unsigned_6(A, B, Z);
  input [2:0] A;
  input [3:0] B;
  output Z;
  wire [2:0] A;
  wire [3:0] B;
  wire Z;
  wire n_17, n_18, n_20, n_21, n_23, n_24, n_25, n_26;
  wire n_27, n_28, n_31, n_33, n_34, n_37, n_38, n_39;
  not g3 (n_17, B[2]);
  not g4 (n_18, B[1]);
  not g6 (Z, n_20);
  nand g10 (n_24, n_21, B[0]);
  nor g11 (n_23, A[1], n_18);
  nand g12 (n_26, A[1], n_18);
  nor g13 (n_33, A[2], n_17);
  nand g14 (n_28, A[2], n_17);
  not g17 (n_25, n_23);
  nand g18 (n_27, n_24, n_25);
  nand g19 (n_34, n_26, n_27);
  nor g20 (n_31, n_28, B[3]);
  nor g23 (n_37, n_33, B[3]);
  nand g27 (n_39, n_37, n_34);
  nand g28 (n_20, n_38, n_39);
  not g37 (n_21, A[0]);
  not g39 (n_38, n_31);
endmodule

module add_unsigned(A, B, Z);
  input [3:0] A;
  input B;
  output [3:0] Z;
  wire [3:0] A;
  wire B;
  wire [3:0] Z;
  wire n_11, n_18, n_21, n_28, n_30, n_34, n_35, n_37;
  wire n_38;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_11, A[0], B);
  nand g13 (n_21, n_18, A[1]);
  nand g20 (n_30, n_28, A[2]);
  xnor g25 (Z[1], n_18, n_34);
  xnor g27 (Z[2], n_28, n_35);
  xnor g30 (Z[3], n_37, n_38);
  not g35 (n_18, n_11);
  not g36 (n_34, A[1]);
  not g37 (n_35, A[2]);
  not g38 (n_38, A[3]);
  not g39 (n_28, n_21);
  not g40 (n_37, n_30);
endmodule

module add_unsigned_8(A, B, Z);
  input [15:0] A;
  input B;
  output [15:0] Z;
  wire [15:0] A;
  wire B;
  wire [15:0] Z;
  wire n_35, n_54, n_57, n_59, n_63, n_65, n_69, n_71;
  wire n_75, n_77, n_81, n_83, n_87, n_89, n_93, n_99;
  wire n_100, n_102, n_103, n_105, n_109, n_111, n_119, n_121;
  wire n_129, n_136, n_138, n_139, n_140, n_141, n_143, n_144;
  wire n_145, n_147, n_151, n_152, n_155, n_163, n_165, n_166;
  wire n_167, n_168, n_170, n_171, n_172, n_173, n_175, n_176;
  wire n_178, n_179, n_181, n_185, n_188, n_192, n_194, n_197;
  wire n_201, n_203, n_206, n_209, n_212, n_214, n_217, n_218;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_35, A[0], B);
  nand g37 (n_57, n_54, A[1]);
  nor g42 (n_103, n_63, n_59);
  nor g46 (n_109, n_69, n_65);
  nor g50 (n_111, n_75, n_71);
  nor g54 (n_119, n_81, n_77);
  nor g58 (n_121, n_87, n_83);
  nor g62 (n_129, n_93, n_89);
  nand g68 (n_102, n_100, A[2]);
  nand g70 (n_105, n_103, n_100);
  nand g76 (n_140, n_109, A[6]);
  nand g81 (n_144, n_109, n_111);
  nand g86 (n_167, n_119, A[10]);
  nand g91 (n_151, n_119, n_121);
  nand g96 (n_155, n_129, A[14]);
  nand g103 (n_138, n_136, A[4]);
  nand g105 (n_139, n_109, n_136);
  not g107 (n_141, n_140);
  nand g108 (n_143, n_136, n_141);
  not g110 (n_145, n_144);
  nand g111 (n_147, n_136, n_145);
  nor g116 (n_173, n_93, n_151);
  not g117 (n_152, n_129);
  nor g121 (n_176, n_151, n_152);
  nor g125 (n_179, n_151, n_155);
  nand g131 (n_165, n_163, A[8]);
  nand g133 (n_166, n_119, n_163);
  not g135 (n_168, n_167);
  nand g136 (n_170, n_163, n_168);
  not g138 (n_171, n_151);
  nand g139 (n_172, n_163, n_171);
  nand g141 (n_175, n_173, n_163);
  nand g143 (n_178, n_176, n_163);
  nand g145 (n_181, n_179, n_163);
  xnor g150 (Z[1], n_54, n_185);
  xnor g152 (Z[2], n_100, n_63);
  xnor g155 (Z[3], n_188, n_59);
  xnor g157 (Z[4], n_136, n_69);
  xnor g160 (Z[5], n_192, n_65);
  xnor g162 (Z[6], n_194, n_75);
  xnor g165 (Z[7], n_197, n_71);
  xnor g167 (Z[8], n_163, n_81);
  xnor g170 (Z[9], n_201, n_77);
  xnor g172 (Z[10], n_203, n_87);
  xnor g175 (Z[11], n_206, n_83);
  xnor g178 (Z[12], n_209, n_93);
  xnor g181 (Z[13], n_212, n_89);
  xnor g183 (Z[14], n_214, n_99);
  xnor g186 (Z[15], n_217, n_218);
  not g189 (n_63, A[2]);
  not g190 (n_59, A[3]);
  not g191 (n_69, A[4]);
  not g192 (n_65, A[5]);
  not g193 (n_75, A[6]);
  not g194 (n_71, A[7]);
  not g195 (n_81, A[8]);
  not g196 (n_77, A[9]);
  not g197 (n_87, A[10]);
  not g198 (n_83, A[11]);
  not g199 (n_93, A[12]);
  not g200 (n_89, A[13]);
  not g201 (n_99, A[14]);
  not g203 (n_54, n_35);
  not g204 (n_185, A[1]);
  not g205 (n_218, A[15]);
  not g206 (n_100, n_57);
  not g207 (n_188, n_102);
  not g208 (n_136, n_105);
  not g209 (n_192, n_138);
  not g210 (n_194, n_139);
  not g211 (n_197, n_143);
  not g212 (n_163, n_147);
  not g213 (n_201, n_165);
  not g214 (n_203, n_166);
  not g215 (n_206, n_170);
  not g216 (n_209, n_172);
  not g217 (n_212, n_175);
  not g218 (n_214, n_178);
  not g219 (n_217, n_181);
endmodule

module add_unsigned_10(A, B, Z);
  input [2:0] A;
  input B;
  output [2:0] Z;
  wire [2:0] A;
  wire B;
  wire [2:0] Z;
  wire n_9, n_15, n_18, n_20, n_24, n_25;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_9, A[0], B);
  nand g11 (n_18, n_15, A[1]);
  xnor g17 (Z[1], n_15, n_24);
  xnor g19 (Z[2], n_20, n_25);
  not g23 (n_15, n_9);
  not g24 (n_24, A[1]);
  not g25 (n_25, A[2]);
  not g26 (n_20, n_18);
endmodule

module shift_left_vlog_unsigned(A, SH, Z);
  input A;
  input [2:0] SH;
  output [7:0] Z;
  wire A;
  wire [2:0] SH;
  wire [7:0] Z;
  wire n_19, n_20, n_21;
  nor g24 (Z[0], SH[0], SH[2], SH[1]);
  not g31 (n_19, SH[0]);
  not g32 (n_20, SH[1]);
  not g33 (n_21, SH[2]);
  nor g34 (Z[1], SH[2], SH[1], n_19);
  nor g35 (Z[7], n_19, n_20, n_21);
  nor g36 (Z[6], n_21, n_20, SH[0]);
  nor g37 (Z[3], SH[2], n_20, n_19);
  nor g38 (Z[2], SH[2], n_20, SH[0]);
  nor g39 (Z[5], n_21, SH[1], n_19);
  nor g40 (Z[4], n_21, SH[1], SH[0]);
endmodule

module add_unsigned_15(A, B, Z);
  input [7:0] A;
  input B;
  output [7:0] Z;
  wire [7:0] A;
  wire B;
  wire [7:0] Z;
  wire n_19, n_30, n_33, n_35, n_39, n_41, n_45, n_51;
  wire n_52, n_54, n_55, n_57, n_61, n_68, n_70, n_71;
  wire n_72, n_73, n_75, n_80, n_83, n_87, n_89, n_92;
  wire n_93;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_19, A[0], B);
  nand g21 (n_33, n_30, A[1]);
  nor g26 (n_55, n_39, n_35);
  nor g30 (n_61, n_45, n_41);
  nand g36 (n_54, n_52, A[2]);
  nand g38 (n_57, n_55, n_52);
  nand g44 (n_72, n_61, A[6]);
  nand g51 (n_70, n_68, A[4]);
  nand g53 (n_71, n_61, n_68);
  not g55 (n_73, n_72);
  nand g56 (n_75, n_68, n_73);
  xnor g62 (Z[1], n_30, n_80);
  xnor g64 (Z[2], n_52, n_39);
  xnor g67 (Z[3], n_83, n_35);
  xnor g69 (Z[4], n_68, n_45);
  xnor g72 (Z[5], n_87, n_41);
  xnor g74 (Z[6], n_89, n_51);
  xnor g77 (Z[7], n_92, n_93);
  not g80 (n_39, A[2]);
  not g81 (n_35, A[3]);
  not g82 (n_45, A[4]);
  not g83 (n_41, A[5]);
  not g84 (n_51, A[6]);
  not g86 (n_30, n_19);
  not g87 (n_80, A[1]);
  not g88 (n_93, A[7]);
  not g89 (n_52, n_33);
  not g90 (n_83, n_54);
  not g91 (n_68, n_57);
  not g92 (n_87, n_70);
  not g93 (n_89, n_71);
  not g94 (n_92, n_75);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [7:0] in_0, in_1;
  output [7:0] z;
  wire ctl;
  wire [7:0] in_0, in_1;
  wire [7:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_18(ctl, in_0, in_1, z);
  input ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  wire ctl;
  wire [3:0] in_0, in_1;
  wire [3:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_19(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_22(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  wire ctl;
  wire [1:0] in_0, in_1;
  wire [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module mux(ctl, in_0, in_1, in_2, in_3, z);
  input [3:0] ctl;
  input [2:0] in_0, in_1, in_2, in_3;
  output [2:0] z;
  wire [3:0] ctl;
  wire [2:0] in_0, in_1, in_2, in_3;
  wire [2:0] z;
  CDN_mux4 g1(.sel0 (ctl[3]), .data0 (in_0[2]), .sel1 (ctl[2]), .data1
       (in_1[2]), .sel2 (ctl[1]), .data2 (in_2[2]), .sel3 (ctl[0]),
       .data3 (in_3[2]), .z (z[2]));
  CDN_mux4 g4(.sel0 (ctl[3]), .data0 (in_0[1]), .sel1 (ctl[2]), .data1
       (in_1[1]), .sel2 (ctl[1]), .data2 (in_2[1]), .sel3 (ctl[0]),
       .data3 (in_3[1]), .z (z[1]));
  CDN_mux4 g5(.sel0 (ctl[3]), .data0 (in_0[0]), .sel1 (ctl[2]), .data1
       (in_1[0]), .sel2 (ctl[1]), .data2 (in_2[0]), .sel3 (ctl[0]),
       .data3 (in_3[0]), .z (z[0]));
endmodule

module bmux_25(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, z);
  input [2:0] ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  output [2:0] z;
  wire [2:0] ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  wire [2:0] z;
  CDN_bmux8 g1(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .sel2
       (ctl[2]), .data4 (in_4[2]), .data5 (in_5[2]), .data6 (in_6[2]),
       .data7 (in_7[2]), .z (z[2]));
  CDN_bmux8 g2(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .sel2
       (ctl[2]), .data4 (in_4[1]), .data5 (in_5[1]), .data6 (in_6[1]),
       .data7 (in_7[1]), .z (z[1]));
  CDN_bmux8 g3(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .sel2
       (ctl[2]), .data4 (in_4[0]), .data5 (in_5[0]), .data6 (in_6[0]),
       .data7 (in_7[0]), .z (z[0]));
endmodule

module mux_26(ctl, in_0, in_1, z);
  input [1:0] ctl;
  input [2:0] in_0, in_1;
  output [2:0] z;
  wire [1:0] ctl;
  wire [2:0] in_0, in_1;
  wire [2:0] z;
  CDN_mux2 g1(.sel0 (ctl[1]), .data0 (in_0[2]), .sel1 (ctl[0]), .data1
       (in_1[2]), .z (z[2]));
  CDN_mux2 g4(.sel0 (ctl[1]), .data0 (in_0[1]), .sel1 (ctl[0]), .data1
       (in_1[1]), .z (z[1]));
  CDN_mux2 g5(.sel0 (ctl[1]), .data0 (in_0[0]), .sel1 (ctl[0]), .data1
       (in_1[0]), .z (z[0]));
endmodule

module case_box_20(in_0, out_0);
  input [7:0] in_0;
  output [3:0] out_0;
  wire [7:0] in_0;
  wire [3:0] out_0;
  wire n_9, n_10, n_17, n_19, n_24, n_29, n_31, n_41;
  wire n_45, n_61, n_62, n_63;
  not g25 (n_41, in_0[7]);
  not g26 (n_10, in_0[6]);
  not g27 (n_17, in_0[5]);
  not g28 (n_24, in_0[4]);
  not g29 (n_31, in_0[3]);
  not g31 (n_45, in_0[1]);
  nand g1 (n_63, n_41, n_10, n_17, n_24);
  nand g2 (n_9, n_31, n_61, n_45, n_62);
  nor g3 (out_0[3], n_9, n_63);
  nand g5 (n_19, n_31, n_61, n_45, in_0[0]);
  nor g6 (out_0[2], n_19, n_63);
  nand g8 (n_29, n_31, in_0[2], n_45, n_62);
  nor g9 (out_0[1], n_29, n_63);
  nor g10 (out_0[0], out_0[3], out_0[2], out_0[1]);
  not g11 (n_61, in_0[2]);
  not g12 (n_62, in_0[0]);
endmodule

module mux_29(ctl, in_0, in_1, in_2, in_3, z);
  input [3:0] ctl;
  input [1:0] in_0, in_1, in_2, in_3;
  output [1:0] z;
  wire [3:0] ctl;
  wire [1:0] in_0, in_1, in_2, in_3;
  wire [1:0] z;
  CDN_mux4 g1(.sel0 (ctl[3]), .data0 (in_0[1]), .sel1 (ctl[2]), .data1
       (in_1[1]), .sel2 (ctl[1]), .data2 (in_2[1]), .sel3 (ctl[0]),
       .data3 (in_3[1]), .z (z[1]));
  CDN_mux4 g3(.sel0 (ctl[3]), .data0 (in_0[0]), .sel1 (ctl[2]), .data1
       (in_1[0]), .sel2 (ctl[1]), .data2 (in_2[0]), .sel3 (ctl[0]),
       .data3 (in_3[0]), .z (z[0]));
endmodule

module bmux_30(ctl, in_0, in_1, z);
  input ctl;
  input [2:0] in_0, in_1;
  output [2:0] z;
  wire ctl;
  wire [2:0] in_0, in_1;
  wire [2:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_49(ctl, in_0, in_1, z);
  input ctl;
  input [15:0] in_0, in_1;
  output [15:0] z;
  wire ctl;
  wire [15:0] in_0, in_1;
  wire [15:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module permut_sel_aio(clk, resn, en, sel, ready, init, amp_enable,
     cout);
  input clk, resn, en;
  input [15:0] sel;
  output ready, init, amp_enable;
  output [7:0] cout;
  wire clk, resn, en;
  wire [15:0] sel;
  wire ready, init, amp_enable;
  wire [7:0] cout;
  wire [15:0] swp_cnt;
  wire [3:0] i;
  wire [2:0] \c[i] ;
  wire [2:0] next_cout;
  wire [7:0] stepcount;
  wire [7:0] next_state;
  wire [2:0] \array[0] ;
  wire [2:0] \array[1] ;
  wire [2:0] \array[2] ;
  wire [2:0] \array[3] ;
  wire [2:0] \array[4] ;
  wire [2:0] \array[5] ;
  wire [2:0] \array[6] ;
  wire [2:0] \array[7] ;
  wire [2:0] \array[stepcount] ;
  wire [7:0] state;
  wire [2:0] \c[0] ;
  wire [2:0] \c[1] ;
  wire [2:0] \c[2] ;
  wire [2:0] \c[3] ;
  wire [2:0] \c[4] ;
  wire [2:0] \c[5] ;
  wire [2:0] \c[6] ;
  wire [2:0] \c[7] ;
  wire [2:0] \array[c[i]] ;
  wire [2:0] \array[i] ;
  wire UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       UNCONNECTED3, UNCONNECTED4, UNCONNECTED5, UNCONNECTED6;
  wire UNCONNECTED7, UNCONNECTED8, UNCONNECTED9, UNCONNECTED10,
       UNCONNECTED11, UNCONNECTED12, UNCONNECTED13, UNCONNECTED14;
  wire UNCONNECTED15, UNCONNECTED16, UNCONNECTED17, UNCONNECTED18,
       UNCONNECTED19, UNCONNECTED20, UNCONNECTED21, UNCONNECTED22;
  wire UNCONNECTED23, UNCONNECTED24, UNCONNECTED25, UNCONNECTED26,
       UNCONNECTED27, UNCONNECTED28, UNCONNECTED29, UNCONNECTED30;
  wire UNCONNECTED31, UNCONNECTED32, UNCONNECTED33, UNCONNECTED34,
       UNCONNECTED35, UNCONNECTED36, UNCONNECTED37, UNCONNECTED38;
  wire UNCONNECTED39, UNCONNECTED40, UNCONNECTED41, UNCONNECTED42,
       UNCONNECTED43, UNCONNECTED44, UNCONNECTED45, UNCONNECTED46;
  wire UNCONNECTED47, UNCONNECTED48, UNCONNECTED49, UNCONNECTED50,
       UNCONNECTED51, UNCONNECTED52, UNCONNECTED53, UNCONNECTED54;
  wire UNCONNECTED55, UNCONNECTED56, UNCONNECTED57, UNCONNECTED58,
       UNCONNECTED59, UNCONNECTED60, UNCONNECTED61, UNCONNECTED62;
  wire UNCONNECTED63, UNCONNECTED64, UNCONNECTED65, UNCONNECTED66,
       UNCONNECTED67, UNCONNECTED68, UNCONNECTED69, UNCONNECTED70;
  wire UNCONNECTED71, UNCONNECTED72, UNCONNECTED73, UNCONNECTED74,
       UNCONNECTED75, UNCONNECTED76, UNCONNECTED77, UNCONNECTED78;
  wire UNCONNECTED79, UNCONNECTED80, UNCONNECTED81, UNCONNECTED82,
       UNCONNECTED83, UNCONNECTED84, UNCONNECTED85, UNCONNECTED86;
  wire UNCONNECTED87, UNCONNECTED88, UNCONNECTED89, UNCONNECTED90,
       UNCONNECTED91, \c[i][0]_289 , \c[i][0]_562 , \c[i][1]_290 ;
  wire \c[i][1]_563 , \c[i][2]_291 , \c[i][2]_564 , n_199, n_200,
       n_202, n_203, n_204;
  wire n_205, n_206, n_207, n_208, n_210, n_211, n_212, n_213;
  wire n_214, n_215, n_216, n_217, n_218, n_219, n_220, n_221;
  wire n_222, n_223, n_224, n_225, n_226, n_227, n_228, n_229;
  wire n_230, n_231, n_232, n_233, n_234, n_235, n_236, n_237;
  wire n_238, n_239, n_240, n_241, n_242, n_243, n_244, n_245;
  wire n_246, n_247, n_248, n_249, n_250, n_251, n_252, n_253;
  wire n_254, n_255, n_256, n_257, n_258, n_259, n_260, n_261;
  wire n_262, n_263, n_264, n_265, n_266, n_267, n_268, n_269;
  wire n_270, n_271, n_272, n_273, n_274, n_275, n_276, n_277;
  wire n_278, n_279, n_280, n_281, n_282, n_283, n_284, n_285;
  wire n_286, n_287, n_288, n_292, n_293, n_294, n_295, n_296;
  wire n_297, n_298, n_299, n_300, n_301, n_302, n_303, n_304;
  wire n_307, n_308, n_309, n_310, n_311, n_312, n_313, n_314;
  wire n_315, n_316, n_317, n_318, n_319, n_320, n_321, n_322;
  wire n_323, n_324, n_325, n_326, n_327, n_328, n_329, n_330;
  wire n_331, n_332, n_333, n_334, n_335, n_336, n_337, n_338;
  wire n_339, n_340, n_341, n_342, n_343, n_344, n_345, n_346;
  wire n_347, n_348, n_349, n_350, n_351, n_352, n_353, n_354;
  wire n_355, n_356, n_357, n_358, n_359, n_360, n_361, n_362;
  wire n_363, n_366, n_367, n_368, n_369, n_371, n_372, n_373;
  wire n_376, n_377, n_379, n_380, n_381, n_382, n_385, n_386;
  wire n_388, n_389, n_390, n_393, n_394, n_396, n_397, n_398;
  wire n_401, n_402, n_404, n_405, n_406, n_409, n_410, n_412;
  wire n_413, n_414, n_417, n_418, n_420, n_421, n_422, n_425;
  wire n_426, n_428, n_429, n_430, n_433, n_434, n_436, n_437;
  wire n_438, n_441, n_443, n_444, n_445, n_447, n_448, n_450;
  wire n_451, n_452, n_456, n_459, n_460, n_461, n_462, n_463;
  wire n_467, n_470, n_471, n_472, n_473, n_474, n_478, n_481;
  wire n_482, n_483, n_484, n_485, n_489, n_492, n_493, n_494;
  wire n_495, n_496, n_500, n_503, n_504, n_505, n_506, n_507;
  wire n_511, n_514, n_515, n_516, n_517, n_518, n_522, n_524;
  wire n_525, n_526, n_527, n_531, n_532, n_533, n_534, n_535;
  wire n_536, n_537, n_538, n_539, n_542, n_543, n_544, n_545;
  wire n_566, n_567, n_568, n_569, n_570, n_574, n_575, n_576;
  wire n_577, n_578, n_579, n_580, n_581, n_582, n_586, n_587;
  wire n_588, n_590, n_591, n_592, n_593, n_594, n_617, n_618;
  wire n_619, n_620, n_621, n_622, n_623, n_624, n_651, n_652;
  wire n_653, n_924, n_925, n_926, n_927, n_931, n_932, n_933;
  wire n_935, n_936, n_937, n_938, n_939, n_940, n_941, n_942;
  or_op_17 g25(.A (cout), .B ({n_539, n_538, n_537, n_536, n_535,
       n_534, n_533, n_532}), .Z ({n_237, n_236, n_235, n_234, n_233,
       n_232, n_231, n_230}));
  lt_unsigned lt_49_12(.A (swp_cnt), .B (sel), .Z (n_367));
  lt_unsigned lt_49_27(.A (swp_cnt), .B (16'b1001110101111111), .Z
       (n_368));
  lt_unsigned_4 lt_50_22(.A (i), .B (4'b1000), .Z (n_207));
  lt_unsigned_6 lt_51_33(.A ({\c[i] [2], \c[i] [1], \c[i] [0]}), .B
       (i), .Z (n_202));
  add_unsigned add_68_37(.A (i), .B (1'b1), .Z ({n_206, n_205, n_204,
       n_203}));
  add_unsigned_8 add_64_49(.A (swp_cnt), .B (1'b1), .Z ({n_288, n_287,
       n_286, n_285, n_284, n_283, n_282, n_281, n_280, n_279, n_278,
       n_277, n_276, n_275, n_274, n_273}));
  add_unsigned_10 add_62_43(.A ({\c[i][2]_564 , \c[i][1]_563 ,
       \c[i][0]_562 }), .B (1'b1), .Z ({n_244, n_243, n_242}));
  shift_left_vlog_unsigned sll_101_29(.A (1'b1), .SH (next_cout), .Z
       ({n_539, n_538, n_537, n_536, n_535, n_534, n_533, n_532}));
  add_unsigned_15 add_100_27(.A (stepcount), .B (1'b1), .Z ({n_218,
       n_217, n_216, n_215, n_214, n_213, n_212, n_211}));
  bmux mux_state_92_5(.ctl (n_199), .in_0 (next_state), .in_1
       (8'b00000000), .z ({UNCONNECTED6, UNCONNECTED5, UNCONNECTED4,
       UNCONNECTED3, UNCONNECTED2, UNCONNECTED1, UNCONNECTED0,
       UNCONNECTED}));
  bmux_18 mux_i_51_33(.ctl (n_202), .in_0 ({n_206, n_205, n_204,
       n_203}), .in_1 (4'b0000), .z ({n_272, n_271, n_270, n_269}));
  bmux_19 mux_ready_23_19(.ctl (n_200), .in_0 (1'b1), .in_1 (1'b0), .z
       (UNCONNECTED7));
  bmux_19 mux_112_18(.ctl (ready), .in_0 (1'b0), .in_1 (1'b1), .z
       (n_224));
  bmux mux_stepcount_92_5(.ctl (n_199), .in_0 ({n_218, n_217, n_216,
       n_215, n_214, n_213, n_212, n_211}), .in_1 (8'b00000000), .z
       ({UNCONNECTED15, UNCONNECTED14, UNCONNECTED13, UNCONNECTED12,
       UNCONNECTED11, UNCONNECTED10, UNCONNECTED9, UNCONNECTED8}));
  bmux_22 mux_116_29(.ctl (n_219), .in_0 (2'b01), .in_1 (2'b10), .z
       ({n_226, n_225}));
  bmux_19 mux_124_18(.ctl (en), .in_0 (1'b0), .in_1 (1'b1), .z (n_227));
  mux mux_next_state_110_7(.ctl ({n_220, n_221, n_222, n_223}), .in_0
       ({2'b00, n_224}), .in_1 ({1'b0, n_226, n_225}), .in_2 (3'b100),
       .in_3 ({n_227, 2'b00}), .z ({n_545, n_544, n_542}));
  bmux_25 \mux_array[stepcount]_118_17 (.ctl (stepcount[2:0]), .in_0
       ({\array[0] [2], \array[0] [1], \array[0] [0]}), .in_1
       ({\array[1] [2], \array[1] [1], \array[1] [0]}), .in_2
       ({\array[2] [2], \array[2] [1], \array[2] [0]}), .in_3
       ({\array[3] [2], \array[3] [1], \array[3] [0]}), .in_4
       ({\array[4] [2], \array[4] [1], \array[4] [0]}), .in_5
       ({\array[5] [2], \array[5] [1], \array[5] [0]}), .in_6
       ({\array[6] [2], \array[6] [1], \array[6] [0]}), .in_7
       ({\array[7] [2], \array[7] [1], \array[7] [0]}), .z
       ({\array[stepcount] [2], \array[stepcount] [1],
       \array[stepcount] [0]}));
  mux_26 mux_next_cout_110_7(.ctl ({n_221, n_229}), .in_0
       ({\array[stepcount] [2], \array[stepcount] [1],
       \array[stepcount] [0]}), .in_1 (3'b000), .z (next_cout));
  bmux mux_cout_r_92_5(.ctl (n_199), .in_0 ({n_237, n_236, n_235,
       n_234, n_233, n_232, n_231, n_230}), .in_1 (8'b00000000), .z
       ({UNCONNECTED23, UNCONNECTED22, UNCONNECTED21, UNCONNECTED20,
       UNCONNECTED19, UNCONNECTED18, UNCONNECTED17, UNCONNECTED16}));
  case_box_20 ctl_110_7(.in_0 (state), .out_0 ({n_238, n_239, n_240,
       n_241}));
  mux_29 mux_cmbsop_init_110_7(.ctl ({n_238, n_239, n_240, n_241}),
       .in_0 (2'b10), .in_1 (2'b00), .in_2 (2'b01), .in_3 (2'b00), .z
       ({init, amp_enable}));
  bmux_30 \mux_c[1]_51_33 (.ctl (n_202), .in_0 (3'b000), .in_1 ({n_244,
       n_243, n_242}), .z ({n_247, n_246, n_245}));
  bmux_30 \mux_c[1]_23_19 (.ctl (n_200), .in_0 ({n_247, n_246, n_245}),
       .in_1 (3'b000), .z ({UNCONNECTED26, UNCONNECTED25,
       UNCONNECTED24}));
  bmux_30 \mux_c[2]_51_33 (.ctl (n_202), .in_0 (3'b000), .in_1 ({n_244,
       n_243, n_242}), .z ({n_250, n_249, n_248}));
  bmux_30 \mux_c[2]_23_19 (.ctl (n_200), .in_0 ({n_250, n_249, n_248}),
       .in_1 (3'b000), .z ({UNCONNECTED29, UNCONNECTED28,
       UNCONNECTED27}));
  bmux_30 \mux_c[3]_51_33 (.ctl (n_202), .in_0 (3'b000), .in_1 ({n_244,
       n_243, n_242}), .z ({n_253, n_252, n_251}));
  bmux_30 \mux_c[3]_23_19 (.ctl (n_200), .in_0 ({n_253, n_252, n_251}),
       .in_1 (3'b000), .z ({UNCONNECTED32, UNCONNECTED31,
       UNCONNECTED30}));
  bmux_30 \mux_c[4]_51_33 (.ctl (n_202), .in_0 (3'b000), .in_1 ({n_244,
       n_243, n_242}), .z ({n_256, n_255, n_254}));
  bmux_30 \mux_c[4]_23_19 (.ctl (n_200), .in_0 ({n_256, n_255, n_254}),
       .in_1 (3'b000), .z ({UNCONNECTED35, UNCONNECTED34,
       UNCONNECTED33}));
  bmux_30 \mux_c[5]_51_33 (.ctl (n_202), .in_0 (3'b000), .in_1 ({n_244,
       n_243, n_242}), .z ({n_259, n_258, n_257}));
  bmux_30 \mux_c[5]_23_19 (.ctl (n_200), .in_0 ({n_259, n_258, n_257}),
       .in_1 (3'b000), .z ({UNCONNECTED38, UNCONNECTED37,
       UNCONNECTED36}));
  bmux_30 \mux_c[6]_51_33 (.ctl (n_202), .in_0 (3'b000), .in_1 ({n_244,
       n_243, n_242}), .z ({n_262, n_261, n_260}));
  bmux_30 \mux_c[6]_23_19 (.ctl (n_200), .in_0 ({n_262, n_261, n_260}),
       .in_1 (3'b000), .z ({UNCONNECTED41, UNCONNECTED40,
       UNCONNECTED39}));
  bmux_30 \mux_c[7]_51_33 (.ctl (n_202), .in_0 (3'b000), .in_1 ({n_244,
       n_243, n_242}), .z ({n_265, n_264, n_263}));
  bmux_30 \mux_c[7]_23_19 (.ctl (n_200), .in_0 ({n_265, n_264, n_263}),
       .in_1 (3'b000), .z ({UNCONNECTED44, UNCONNECTED43,
       UNCONNECTED42}));
  bmux_25 \mux_c[i]_62_39 (.ctl (i[2:0]), .in_0 ({\c[0] [2], \c[0] [1],
       \c[0] [0]}), .in_1 ({\c[1] [2], \c[1] [1], \c[1] [0]}), .in_2
       ({\c[2] [2], \c[2] [1], \c[2] [0]}), .in_3 ({\c[3] [2], \c[3]
       [1], \c[3] [0]}), .in_4 ({\c[4] [2], \c[4] [1], \c[4] [0]}),
       .in_5 ({\c[5] [2], \c[5] [1], \c[5] [0]}), .in_6 ({\c[6] [2],
       \c[6] [1], \c[6] [0]}), .in_7 ({\c[7] [2], \c[7] [1], \c[7]
       [0]}), .z ({\c[i][2]_564 , \c[i][1]_563 , \c[i][0]_562 }));
  bmux_30 \mux_c[0]_51_33 (.ctl (n_202), .in_0 (3'b000), .in_1 ({n_244,
       n_243, n_242}), .z ({n_268, n_267, n_266}));
  bmux_30 \mux_c[0]_23_19 (.ctl (n_200), .in_0 ({n_268, n_267, n_266}),
       .in_1 (3'b000), .z ({UNCONNECTED47, UNCONNECTED46,
       UNCONNECTED45}));
  bmux_25 \mux_c[i]_51_29 (.ctl (i[2:0]), .in_0 ({\c[0] [2], \c[0] [1],
       \c[0] [0]}), .in_1 ({\c[1] [2], \c[1] [1], \c[1] [0]}), .in_2
       ({\c[2] [2], \c[2] [1], \c[2] [0]}), .in_3 ({\c[3] [2], \c[3]
       [1], \c[3] [0]}), .in_4 ({\c[4] [2], \c[4] [1], \c[4] [0]}),
       .in_5 ({\c[5] [2], \c[5] [1], \c[5] [0]}), .in_6 ({\c[6] [2],
       \c[6] [1], \c[6] [0]}), .in_7 ({\c[7] [2], \c[7] [1], \c[7]
       [0]}), .z ({\c[i] [2], \c[i] [1], \c[i] [0]}));
  bmux_18 mux_i_23_19(.ctl (n_200), .in_0 ({n_272, n_271, n_270,
       n_269}), .in_1 (4'b0000), .z ({UNCONNECTED51, UNCONNECTED50,
       UNCONNECTED49, UNCONNECTED48}));
  bmux_49 mux_swp_cnt_23_19(.ctl (n_200), .in_0 ({n_288, n_287, n_286,
       n_285, n_284, n_283, n_282, n_281, n_280, n_279, n_278, n_277,
       n_276, n_275, n_274, n_273}), .in_1 (16'b0000000000000000), .z
       ({UNCONNECTED67, UNCONNECTED66, UNCONNECTED65, UNCONNECTED64,
       UNCONNECTED63, UNCONNECTED62, UNCONNECTED61, UNCONNECTED60,
       UNCONNECTED59, UNCONNECTED58, UNCONNECTED57, UNCONNECTED56,
       UNCONNECTED55, UNCONNECTED54, UNCONNECTED53, UNCONNECTED52}));
  bmux_25 \mux_c[i]_60_18 (.ctl (i[2:0]), .in_0 ({\c[0] [2], \c[0] [1],
       \c[0] [0]}), .in_1 ({\c[1] [2], \c[1] [1], \c[1] [0]}), .in_2
       ({\c[2] [2], \c[2] [1], \c[2] [0]}), .in_3 ({\c[3] [2], \c[3]
       [1], \c[3] [0]}), .in_4 ({\c[4] [2], \c[4] [1], \c[4] [0]}),
       .in_5 ({\c[5] [2], \c[5] [1], \c[5] [0]}), .in_6 ({\c[6] [2],
       \c[6] [1], \c[6] [0]}), .in_7 ({\c[7] [2], \c[7] [1], \c[7]
       [0]}), .z ({\c[i][2]_291 , \c[i][1]_290 , \c[i][0]_289 }));
  bmux_25 \mux_c[i]_59_41 (.ctl (i[2:0]), .in_0 ({\c[0] [2], \c[0] [1],
       \c[0] [0]}), .in_1 ({\c[1] [2], \c[1] [1], \c[1] [0]}), .in_2
       ({\c[2] [2], \c[2] [1], \c[2] [0]}), .in_3 ({\c[3] [2], \c[3]
       [1], \c[3] [0]}), .in_4 ({\c[4] [2], \c[4] [1], \c[4] [0]}),
       .in_5 ({\c[5] [2], \c[5] [1], \c[5] [0]}), .in_6 ({\c[6] [2],
       \c[6] [1], \c[6] [0]}), .in_7 ({\c[7] [2], \c[7] [1], \c[7]
       [0]}), .z ({n_445, n_444, n_443}));
  bmux_25 \mux_array[i]_59_56 (.ctl (i[2:0]), .in_0 ({\array[0] [2],
       \array[0] [1], \array[0] [0]}), .in_1 ({\array[1] [2],
       \array[1] [1], \array[1] [0]}), .in_2 ({\array[2] [2],
       \array[2] [1], \array[2] [0]}), .in_3 ({\array[3] [2],
       \array[3] [1], \array[3] [0]}), .in_4 ({\array[4] [2],
       \array[4] [1], \array[4] [0]}), .in_5 ({\array[5] [2],
       \array[5] [1], \array[5] [0]}), .in_6 ({\array[6] [2],
       \array[6] [1], \array[6] [0]}), .in_7 ({\array[7] [2],
       \array[7] [1], \array[7] [0]}), .z ({n_296, n_295, n_294}));
  bmux_25 \mux_array[c[i]]_60_18 (.ctl ({\c[i][2]_291 , \c[i][1]_290 ,
       \c[i][0]_289 }), .in_0 ({\array[0] [2], \array[0] [1],
       \array[0] [0]}), .in_1 ({\array[1] [2], \array[1] [1],
       \array[1] [0]}), .in_2 ({\array[2] [2], \array[2] [1],
       \array[2] [0]}), .in_3 ({\array[3] [2], \array[3] [1],
       \array[3] [0]}), .in_4 ({\array[4] [2], \array[4] [1],
       \array[4] [0]}), .in_5 ({\array[5] [2], \array[5] [1],
       \array[5] [0]}), .in_6 ({\array[6] [2], \array[6] [1],
       \array[6] [0]}), .in_7 ({\array[7] [2], \array[7] [1],
       \array[7] [0]}), .z ({\array[c[i]] [2], \array[c[i]] [1],
       \array[c[i]] [0]}));
  mux_26 \mux_array[1]_60_6 (.ctl ({n_292, n_293}), .in_0
       ({\array[c[i]] [2], \array[c[i]] [1], \array[c[i]] [0]}), .in_1
       ({n_296, n_295, n_294}), .z ({n_299, n_298, n_297}));
  bmux_30 \mux_array[1]_54_42 (.ctl (n_228), .in_0 ({n_299, n_298,
       n_297}), .in_1 ({\array[0] [2], \array[0] [1], \array[0] [0]}),
       .z ({n_302, n_301, n_300}));
  bmux_30 \mux_array[1]_23_19 (.ctl (n_200), .in_0 ({n_302, n_301,
       n_300}), .in_1 (3'b001), .z ({UNCONNECTED70, UNCONNECTED69,
       UNCONNECTED68}));
  bmux_25 \mux_array[i]_55_53 (.ctl (i[2:0]), .in_0 ({\array[0] [2],
       \array[0] [1], \array[0] [0]}), .in_1 ({\array[1] [2],
       \array[1] [1], \array[1] [0]}), .in_2 ({\array[2] [2],
       \array[2] [1], \array[2] [0]}), .in_3 ({\array[3] [2],
       \array[3] [1], \array[3] [0]}), .in_4 ({\array[4] [2],
       \array[4] [1], \array[4] [0]}), .in_5 ({\array[5] [2],
       \array[5] [1], \array[5] [0]}), .in_6 ({\array[6] [2],
       \array[6] [1], \array[6] [0]}), .in_7 ({\array[7] [2],
       \array[7] [1], \array[7] [0]}), .z ({\array[i] [2], \array[i]
       [1], \array[i] [0]}));
  mux_26 \mux_array[0]_56_6 (.ctl ({n_303, n_304}), .in_0
       ({\array[0] [2], \array[0] [1], \array[0] [0]}), .in_1
       ({\array[i] [2], \array[i] [1], \array[i] [0]}), .z ({n_311,
       n_309, n_307}));
  mux_26 \mux_array[0]_60_6 (.ctl ({n_303, n_304}), .in_0
       ({\array[c[i]] [2], \array[c[i]] [1], \array[c[i]] [0]}), .in_1
       ({n_296, n_295, n_294}), .z ({n_312, n_310, n_308}));
  bmux_30 \mux_array[0]_54_42 (.ctl (n_228), .in_0 ({n_312, n_310,
       n_308}), .in_1 ({n_311, n_309, n_307}), .z ({n_315, n_314,
       n_313}));
  bmux_30 \mux_array[0]_23_19 (.ctl (n_200), .in_0 ({n_315, n_314,
       n_313}), .in_1 (3'b000), .z ({UNCONNECTED73, UNCONNECTED72,
       UNCONNECTED71}));
  mux_26 \mux_array[3]_60_6 (.ctl ({n_316, n_317}), .in_0
       ({\array[c[i]] [2], \array[c[i]] [1], \array[c[i]] [0]}), .in_1
       ({n_296, n_295, n_294}), .z ({n_320, n_319, n_318}));
  bmux_30 \mux_array[3]_54_42 (.ctl (n_228), .in_0 ({n_320, n_319,
       n_318}), .in_1 ({\array[0] [2], \array[0] [1], \array[0] [0]}),
       .z ({n_323, n_322, n_321}));
  bmux_30 \mux_array[3]_23_19 (.ctl (n_200), .in_0 ({n_323, n_322,
       n_321}), .in_1 (3'b011), .z ({UNCONNECTED76, UNCONNECTED75,
       UNCONNECTED74}));
  mux_26 \mux_array[4]_60_6 (.ctl ({n_324, n_325}), .in_0
       ({\array[c[i]] [2], \array[c[i]] [1], \array[c[i]] [0]}), .in_1
       ({n_296, n_295, n_294}), .z ({n_328, n_327, n_326}));
  bmux_30 \mux_array[4]_54_42 (.ctl (n_228), .in_0 ({n_328, n_327,
       n_326}), .in_1 ({\array[0] [2], \array[0] [1], \array[0] [0]}),
       .z ({n_331, n_330, n_329}));
  bmux_30 \mux_array[4]_23_19 (.ctl (n_200), .in_0 ({n_331, n_330,
       n_329}), .in_1 (3'b100), .z ({UNCONNECTED79, UNCONNECTED78,
       UNCONNECTED77}));
  mux_26 \mux_array[5]_60_6 (.ctl ({n_332, n_333}), .in_0
       ({\array[c[i]] [2], \array[c[i]] [1], \array[c[i]] [0]}), .in_1
       ({n_296, n_295, n_294}), .z ({n_336, n_335, n_334}));
  bmux_30 \mux_array[5]_54_42 (.ctl (n_228), .in_0 ({n_336, n_335,
       n_334}), .in_1 ({\array[0] [2], \array[0] [1], \array[0] [0]}),
       .z ({n_339, n_338, n_337}));
  bmux_30 \mux_array[5]_23_19 (.ctl (n_200), .in_0 ({n_339, n_338,
       n_337}), .in_1 (3'b101), .z ({UNCONNECTED82, UNCONNECTED81,
       UNCONNECTED80}));
  mux_26 \mux_array[6]_60_6 (.ctl ({n_340, n_341}), .in_0
       ({\array[c[i]] [2], \array[c[i]] [1], \array[c[i]] [0]}), .in_1
       ({n_296, n_295, n_294}), .z ({n_344, n_343, n_342}));
  bmux_30 \mux_array[6]_54_42 (.ctl (n_228), .in_0 ({n_344, n_343,
       n_342}), .in_1 ({\array[0] [2], \array[0] [1], \array[0] [0]}),
       .z ({n_347, n_346, n_345}));
  bmux_30 \mux_array[6]_23_19 (.ctl (n_200), .in_0 ({n_347, n_346,
       n_345}), .in_1 (3'b110), .z ({UNCONNECTED85, UNCONNECTED84,
       UNCONNECTED83}));
  mux_26 \mux_array[7]_60_6 (.ctl ({n_348, n_349}), .in_0
       ({\array[c[i]] [2], \array[c[i]] [1], \array[c[i]] [0]}), .in_1
       ({n_296, n_295, n_294}), .z ({n_352, n_351, n_350}));
  bmux_30 \mux_array[7]_54_42 (.ctl (n_228), .in_0 ({n_352, n_351,
       n_350}), .in_1 ({\array[0] [2], \array[0] [1], \array[0] [0]}),
       .z ({n_355, n_354, n_353}));
  bmux_30 \mux_array[7]_23_19 (.ctl (n_200), .in_0 ({n_355, n_354,
       n_353}), .in_1 (3'b111), .z ({UNCONNECTED88, UNCONNECTED87,
       UNCONNECTED86}));
  mux_26 \mux_array[2]_60_6 (.ctl ({n_356, n_357}), .in_0
       ({\array[c[i]] [2], \array[c[i]] [1], \array[c[i]] [0]}), .in_1
       ({n_296, n_295, n_294}), .z ({n_360, n_359, n_358}));
  bmux_30 \mux_array[2]_54_42 (.ctl (n_228), .in_0 ({n_360, n_359,
       n_358}), .in_1 ({\array[0] [2], \array[0] [1], \array[0] [0]}),
       .z ({n_363, n_362, n_361}));
  bmux_30 \mux_array[2]_23_19 (.ctl (n_200), .in_0 ({n_363, n_362,
       n_361}), .in_1 (3'b010), .z ({UNCONNECTED91, UNCONNECTED90,
       UNCONNECTED89}));
  not g24 (n_199, resn);
  not g33 (n_379, n_202);
  not g35 (n_369, n_208);
  not g40 (n_229, n_221);
  not g41 (n_293, n_292);
  not g42 (n_304, n_303);
  not g44 (n_317, n_316);
  not g45 (n_325, n_324);
  not g46 (n_333, n_332);
  not g47 (n_341, n_340);
  not g48 (n_349, n_348);
  not g49 (n_357, n_356);
  and g50 (n_371, n_369, en);
  and g51 (n_372, n_207, n_208);
  and g52 (n_373, n_372, en);
  and g56 (n_381, n_377, n_202);
  and g57 (n_380, n_377, n_379);
  or g58 (n_382, n_380, n_381);
  and g62 (n_389, n_386, n_202);
  and g63 (n_388, n_386, n_379);
  or g64 (n_390, n_388, n_389);
  and g68 (n_397, n_394, n_202);
  and g69 (n_396, n_394, n_379);
  or g70 (n_398, n_396, n_397);
  and g74 (n_405, n_402, n_202);
  and g75 (n_404, n_402, n_379);
  or g76 (n_406, n_404, n_405);
  and g80 (n_413, n_410, n_202);
  and g81 (n_412, n_410, n_379);
  or g82 (n_414, n_412, n_413);
  and g86 (n_421, n_418, n_202);
  and g87 (n_420, n_418, n_379);
  or g88 (n_422, n_420, n_421);
  and g92 (n_429, n_426, n_202);
  and g93 (n_428, n_426, n_379);
  or g94 (n_430, n_428, n_429);
  and g98 (n_437, n_434, n_202);
  and g99 (n_436, n_434, n_379);
  or g100 (n_438, n_436, n_437);
  and g104 (n_451, n_348, n_228);
  or g106 (n_448, n_447, n_348);
  and g107 (n_450, n_448, i[0]);
  or g108 (n_452, n_450, n_451);
  and g113 (n_462, n_340, n_228);
  or g115 (n_460, n_459, n_340);
  and g116 (n_461, n_460, i[0]);
  or g117 (n_463, n_461, n_462);
  and g122 (n_473, n_332, n_228);
  or g124 (n_471, n_470, n_332);
  and g125 (n_472, n_471, i[0]);
  or g126 (n_474, n_472, n_473);
  and g131 (n_484, n_324, n_228);
  or g133 (n_482, n_481, n_324);
  and g134 (n_483, n_482, i[0]);
  or g135 (n_485, n_483, n_484);
  and g140 (n_495, n_316, n_228);
  or g142 (n_493, n_492, n_316);
  and g143 (n_494, n_493, i[0]);
  or g144 (n_496, n_494, n_495);
  and g149 (n_506, n_356, n_228);
  or g151 (n_504, n_503, n_356);
  and g152 (n_505, n_504, i[0]);
  or g153 (n_507, n_505, n_506);
  and g158 (n_517, n_292, n_228);
  or g160 (n_515, n_514, n_292);
  and g161 (n_516, n_515, i[0]);
  or g162 (n_518, n_516, n_517);
  or g168 (n_525, n_524, n_303);
  and g169 (n_526, n_525, i[0]);
  or g170 (n_527, n_526, n_228);
  not g178 (n_566, state[7]);
  not g179 (n_567, state[6]);
  not g180 (n_568, state[5]);
  not g181 (n_569, state[4]);
  not g182 (n_570, state[3]);
  nand g186 (n_578, n_566, n_567, n_568, n_569);
  nand g187 (n_577, n_570, n_574, n_575, n_576);
  nor g188 (n_220, n_577, n_578);
  nand g189 (n_579, n_570, n_574, n_575, state[0]);
  nor g190 (n_221, n_579, n_578);
  nand g191 (n_580, n_570, n_574, state[1], n_576);
  nor g192 (n_222, n_580, n_578);
  nand g193 (n_581, n_570, state[2], n_575, n_576);
  nor g194 (n_223, n_581, n_578);
  not g196 (n_574, state[2]);
  not g197 (n_575, state[1]);
  not g198 (n_576, state[0]);
  not g199 (n_582, i[3]);
  nand g204 (n_588, n_586, n_587);
  not g205 (n_586, i[2]);
  not g206 (n_587, i[1]);
  nor g209 (n_292, n_588, n_591);
  nand g210 (n_591, i[0], n_582);
  nor g211 (n_356, n_590, n_592);
  nand g212 (n_592, n_586, i[1]);
  nor g213 (n_316, n_592, n_591);
  nor g214 (n_324, n_590, n_593);
  nand g215 (n_593, i[2], n_587);
  nor g216 (n_332, n_593, n_591);
  nor g217 (n_340, n_590, n_594);
  nand g218 (n_594, i[2], i[1]);
  nor g219 (n_348, n_594, n_591);
  nor g225 (n_303, n_588, n_590);
  nand g229 (n_590, n_228, n_582);
  not g230 (n_228, i[0]);
  nand g247 (n_617, n_582, n_586, n_587, n_228);
  nand g248 (n_618, n_582, n_586, n_587, i[0]);
  nand g249 (n_619, n_582, n_586, i[1], n_228);
  nand g250 (n_620, n_582, n_586, i[1], i[0]);
  nand g251 (n_621, n_582, i[2], n_587, n_228);
  nand g252 (n_622, n_582, i[2], n_587, i[0]);
  nand g253 (n_623, n_582, i[2], i[1], n_228);
  nand g254 (n_624, n_582, i[2], i[1], i[0]);
  not g255 (n_434, n_617);
  not g256 (n_426, n_618);
  not g257 (n_418, n_619);
  not g258 (n_410, n_620);
  not g259 (n_402, n_621);
  not g260 (n_394, n_622);
  not g261 (n_386, n_623);
  not g262 (n_377, n_624);
  not g318 (n_651, n_445);
  not g319 (n_652, n_444);
  not g320 (n_653, n_443);
  not g321 (n_366, en);
  or g322 (n_200, n_199, n_366);
  and g323 (n_208, n_367, n_368);
  CDN_flop ready_reg(.clk (clk), .d (1'b1), .sena (n_371), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (ready));
  CDN_flop \i_reg[0] (.clk (clk), .d (n_269), .sena (n_373), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (i[0]));
  CDN_flop \i_reg[1] (.clk (clk), .d (n_270), .sena (n_373), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (i[1]));
  CDN_flop \i_reg[2] (.clk (clk), .d (n_271), .sena (n_373), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (i[2]));
  CDN_flop \i_reg[3] (.clk (clk), .d (n_272), .sena (n_373), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (i[3]));
  CDN_flop \swp_cnt_reg[0] (.clk (clk), .d (n_273), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[0]));
  CDN_flop \swp_cnt_reg[1] (.clk (clk), .d (n_274), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[1]));
  CDN_flop \swp_cnt_reg[2] (.clk (clk), .d (n_275), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[2]));
  CDN_flop \swp_cnt_reg[3] (.clk (clk), .d (n_276), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[3]));
  CDN_flop \swp_cnt_reg[4] (.clk (clk), .d (n_277), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[4]));
  CDN_flop \swp_cnt_reg[5] (.clk (clk), .d (n_278), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[5]));
  CDN_flop \swp_cnt_reg[6] (.clk (clk), .d (n_279), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[6]));
  CDN_flop \swp_cnt_reg[7] (.clk (clk), .d (n_280), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[7]));
  CDN_flop \swp_cnt_reg[8] (.clk (clk), .d (n_281), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[8]));
  CDN_flop \swp_cnt_reg[9] (.clk (clk), .d (n_282), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[9]));
  CDN_flop \swp_cnt_reg[10] (.clk (clk), .d (n_283), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[10]));
  CDN_flop \swp_cnt_reg[11] (.clk (clk), .d (n_284), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[11]));
  CDN_flop \swp_cnt_reg[12] (.clk (clk), .d (n_285), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[12]));
  CDN_flop \swp_cnt_reg[13] (.clk (clk), .d (n_286), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[13]));
  CDN_flop \swp_cnt_reg[14] (.clk (clk), .d (n_287), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[14]));
  CDN_flop \swp_cnt_reg[15] (.clk (clk), .d (n_288), .sena (n_376),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (swp_cnt[15]));
  CDN_flop \c_reg[7][0] (.clk (clk), .d (n_263), .sena (n_385), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[7] [0]));
  CDN_flop \c_reg[7][1] (.clk (clk), .d (n_264), .sena (n_385), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[7] [1]));
  CDN_flop \c_reg[7][2] (.clk (clk), .d (n_265), .sena (n_385), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[7] [2]));
  CDN_flop \c_reg[6][0] (.clk (clk), .d (n_260), .sena (n_393), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[6] [0]));
  CDN_flop \c_reg[6][1] (.clk (clk), .d (n_261), .sena (n_393), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[6] [1]));
  CDN_flop \c_reg[6][2] (.clk (clk), .d (n_262), .sena (n_393), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[6] [2]));
  CDN_flop \c_reg[5][0] (.clk (clk), .d (n_257), .sena (n_401), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[5] [0]));
  CDN_flop \c_reg[5][1] (.clk (clk), .d (n_258), .sena (n_401), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[5] [1]));
  CDN_flop \c_reg[5][2] (.clk (clk), .d (n_259), .sena (n_401), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[5] [2]));
  CDN_flop \c_reg[4][0] (.clk (clk), .d (n_254), .sena (n_409), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[4] [0]));
  CDN_flop \c_reg[4][1] (.clk (clk), .d (n_255), .sena (n_409), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[4] [1]));
  CDN_flop \c_reg[4][2] (.clk (clk), .d (n_256), .sena (n_409), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[4] [2]));
  CDN_flop \c_reg[3][0] (.clk (clk), .d (n_251), .sena (n_417), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[3] [0]));
  CDN_flop \c_reg[3][1] (.clk (clk), .d (n_252), .sena (n_417), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[3] [1]));
  CDN_flop \c_reg[3][2] (.clk (clk), .d (n_253), .sena (n_417), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[3] [2]));
  CDN_flop \c_reg[2][0] (.clk (clk), .d (n_248), .sena (n_425), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[2] [0]));
  CDN_flop \c_reg[2][1] (.clk (clk), .d (n_249), .sena (n_425), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[2] [1]));
  CDN_flop \c_reg[2][2] (.clk (clk), .d (n_250), .sena (n_425), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[2] [2]));
  CDN_flop \c_reg[1][0] (.clk (clk), .d (n_245), .sena (n_433), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[1] [0]));
  CDN_flop \c_reg[1][1] (.clk (clk), .d (n_246), .sena (n_433), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[1] [1]));
  CDN_flop \c_reg[1][2] (.clk (clk), .d (n_247), .sena (n_433), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[1] [2]));
  CDN_flop \c_reg[0][0] (.clk (clk), .d (n_266), .sena (n_441), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[0] [0]));
  CDN_flop \c_reg[0][1] (.clk (clk), .d (n_267), .sena (n_441), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[0] [1]));
  CDN_flop \c_reg[0][2] (.clk (clk), .d (n_268), .sena (n_441), .aclr
       (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q (\c[0] [2]));
  CDN_flop \array_reg[7][0] (.clk (clk), .d (n_353), .sena (n_456),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[7] [0]));
  CDN_flop \array_reg[7][1] (.clk (clk), .d (n_354), .sena (n_456),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[7] [1]));
  CDN_flop \array_reg[7][2] (.clk (clk), .d (n_355), .sena (n_456),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[7] [2]));
  CDN_flop \array_reg[6][0] (.clk (clk), .d (n_345), .sena (n_467),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[6] [0]));
  CDN_flop \array_reg[6][1] (.clk (clk), .d (n_346), .sena (n_467),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[6] [1]));
  CDN_flop \array_reg[6][2] (.clk (clk), .d (n_347), .sena (n_467),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[6] [2]));
  CDN_flop \array_reg[5][0] (.clk (clk), .d (n_337), .sena (n_478),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[5] [0]));
  CDN_flop \array_reg[5][1] (.clk (clk), .d (n_338), .sena (n_478),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[5] [1]));
  CDN_flop \array_reg[5][2] (.clk (clk), .d (n_339), .sena (n_478),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[5] [2]));
  CDN_flop \array_reg[4][0] (.clk (clk), .d (n_329), .sena (n_489),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[4] [0]));
  CDN_flop \array_reg[4][1] (.clk (clk), .d (n_330), .sena (n_489),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[4] [1]));
  CDN_flop \array_reg[4][2] (.clk (clk), .d (n_331), .sena (n_489),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[4] [2]));
  CDN_flop \array_reg[3][0] (.clk (clk), .d (n_321), .sena (n_500),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[3] [0]));
  CDN_flop \array_reg[3][1] (.clk (clk), .d (n_322), .sena (n_500),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[3] [1]));
  CDN_flop \array_reg[3][2] (.clk (clk), .d (n_323), .sena (n_500),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[3] [2]));
  CDN_flop \array_reg[2][0] (.clk (clk), .d (n_361), .sena (n_511),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[2] [0]));
  CDN_flop \array_reg[2][1] (.clk (clk), .d (n_362), .sena (n_511),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[2] [1]));
  CDN_flop \array_reg[2][2] (.clk (clk), .d (n_363), .sena (n_511),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[2] [2]));
  CDN_flop \array_reg[1][0] (.clk (clk), .d (n_300), .sena (n_522),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b1), .q
       (\array[1] [0]));
  CDN_flop \array_reg[1][1] (.clk (clk), .d (n_301), .sena (n_522),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[1] [1]));
  CDN_flop \array_reg[1][2] (.clk (clk), .d (n_302), .sena (n_522),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[1] [2]));
  CDN_flop \array_reg[0][0] (.clk (clk), .d (n_313), .sena (n_531),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[0] [0]));
  CDN_flop \array_reg[0][1] (.clk (clk), .d (n_314), .sena (n_531),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[0] [1]));
  CDN_flop \array_reg[0][2] (.clk (clk), .d (n_315), .sena (n_531),
       .aclr (1'b0), .apre (1'b0), .srl (n_200), .srd (1'b0), .q
       (\array[0] [2]));
  CDN_flop \state_reg[0] (.clk (clk), .d (next_state[0]), .sena (1'b1),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (state[0]));
  CDN_flop \state_reg[1] (.clk (clk), .d (next_state[1]), .sena (1'b1),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (state[1]));
  CDN_flop \state_reg[2] (.clk (clk), .d (next_state[2]), .sena (1'b1),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (state[2]));
  CDN_flop \state_reg[3] (.clk (clk), .d (next_state[3]), .sena (1'b1),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (state[3]));
  CDN_flop \state_reg[4] (.clk (clk), .d (next_state[4]), .sena (1'b1),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (state[4]));
  CDN_flop \state_reg[5] (.clk (clk), .d (next_state[5]), .sena (1'b1),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (state[5]));
  CDN_flop \state_reg[6] (.clk (clk), .d (next_state[6]), .sena (1'b1),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (state[6]));
  CDN_flop \state_reg[7] (.clk (clk), .d (next_state[7]), .sena (1'b1),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (state[7]));
  CDN_flop \cout_r_reg[0] (.clk (clk), .d (n_230), .sena (n_210), .aclr
       (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout[0]));
  CDN_flop \cout_r_reg[1] (.clk (clk), .d (n_231), .sena (n_210), .aclr
       (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout[1]));
  CDN_flop \cout_r_reg[2] (.clk (clk), .d (n_232), .sena (n_210), .aclr
       (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout[2]));
  CDN_flop \cout_r_reg[3] (.clk (clk), .d (n_233), .sena (n_210), .aclr
       (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout[3]));
  CDN_flop \cout_r_reg[4] (.clk (clk), .d (n_234), .sena (n_210), .aclr
       (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout[4]));
  CDN_flop \cout_r_reg[5] (.clk (clk), .d (n_235), .sena (n_210), .aclr
       (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout[5]));
  CDN_flop \cout_r_reg[6] (.clk (clk), .d (n_236), .sena (n_210), .aclr
       (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout[6]));
  CDN_flop \cout_r_reg[7] (.clk (clk), .d (n_237), .sena (n_210), .aclr
       (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout[7]));
  CDN_flop \stepcount_reg[0] (.clk (clk), .d (n_211), .sena (n_210),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (stepcount[0]));
  CDN_flop \stepcount_reg[1] (.clk (clk), .d (n_212), .sena (n_210),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (stepcount[1]));
  CDN_flop \stepcount_reg[2] (.clk (clk), .d (n_213), .sena (n_210),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (stepcount[2]));
  CDN_flop \stepcount_reg[3] (.clk (clk), .d (n_214), .sena (n_210),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (stepcount[3]));
  CDN_flop \stepcount_reg[4] (.clk (clk), .d (n_215), .sena (n_210),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (stepcount[4]));
  CDN_flop \stepcount_reg[5] (.clk (clk), .d (n_216), .sena (n_210),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (stepcount[5]));
  CDN_flop \stepcount_reg[6] (.clk (clk), .d (n_217), .sena (n_210),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (stepcount[6]));
  CDN_flop \stepcount_reg[7] (.clk (clk), .d (n_218), .sena (n_210),
       .aclr (n_199), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (stepcount[7]));
  CDN_latch \next_state_reg[0] (.d (n_542), .ena (n_543), .aclr (1'b0),
       .apre (1'b0), .q (next_state[0]));
  CDN_latch \next_state_reg[1] (.d (n_544), .ena (n_543), .aclr (1'b0),
       .apre (1'b0), .q (next_state[1]));
  CDN_latch \next_state_reg[2] (.d (n_545), .ena (n_543), .aclr (1'b0),
       .apre (1'b0), .q (next_state[2]));
  CDN_latch \next_state_reg[3] (.d (1'b0), .ena (n_543), .aclr (1'b0),
       .apre (1'b0), .q (next_state[3]));
  CDN_latch \next_state_reg[4] (.d (1'b0), .ena (n_543), .aclr (1'b0),
       .apre (1'b0), .q (next_state[4]));
  CDN_latch \next_state_reg[5] (.d (1'b0), .ena (n_543), .aclr (1'b0),
       .apre (1'b0), .q (next_state[5]));
  CDN_latch \next_state_reg[6] (.d (1'b0), .ena (n_543), .aclr (1'b0),
       .apre (1'b0), .q (next_state[6]));
  CDN_latch \next_state_reg[7] (.d (1'b0), .ena (n_543), .aclr (1'b0),
       .apre (1'b0), .q (next_state[7]));
  nor g473 (n_924, state[7], state[6], state[5], state[4]);
  nor g474 (n_925, state[3], state[2], state[1]);
  nand g475 (n_926, state[0], n_924, n_925);
  not g476 (n_210, n_926);
  nor g480 (n_931, stepcount[7], stepcount[6], stepcount[5],
       stepcount[4]);
  not g481 (n_927, stepcount[3]);
  nand g482 (n_932, n_927, stepcount[0], stepcount[1], stepcount[2]);
  not g483 (n_933, n_931);
  nor g484 (n_219, n_932, n_933);
  and g485 (n_376, n_202, n_207, n_208, en);
  and g486 (n_441, n_438, n_207, n_208, en);
  and g487 (n_433, n_430, n_207, n_208, en);
  and g488 (n_425, n_422, n_207, n_208, en);
  and g489 (n_417, n_414, n_207, n_208, en);
  and g490 (n_409, n_406, n_207, n_208, en);
  and g491 (n_401, n_398, n_207, n_208, en);
  and g492 (n_393, n_390, n_207, n_208, en);
  and g493 (n_385, n_382, n_207, n_208, en);
  or g494 (n_543, n_223, n_222, n_221, n_220);
  and g495 (n_935, n_527, n_202);
  and g496 (n_531, n_207, n_208, en, n_935);
  and g497 (n_936, n_518, n_202);
  and g498 (n_522, n_207, n_208, en, n_936);
  and g499 (n_937, n_507, n_202);
  and g500 (n_511, n_207, n_208, en, n_937);
  and g501 (n_938, n_496, n_202);
  and g502 (n_500, n_207, n_208, en, n_938);
  and g503 (n_939, n_485, n_202);
  and g504 (n_489, n_207, n_208, en, n_939);
  and g505 (n_940, n_474, n_202);
  and g506 (n_478, n_207, n_208, en, n_940);
  and g507 (n_941, n_463, n_202);
  and g508 (n_467, n_207, n_208, en, n_941);
  and g509 (n_942, n_452, n_202);
  and g510 (n_456, n_207, n_208, en, n_942);
  and g511 (n_524, n_651, n_652, n_653, n_304);
  and g512 (n_514, n_651, n_652, n_443, n_293);
  and g513 (n_503, n_651, n_444, n_653, n_357);
  and g514 (n_492, n_651, n_444, n_443, n_317);
  and g515 (n_481, n_445, n_652, n_653, n_325);
  and g516 (n_470, n_445, n_652, n_443, n_333);
  and g517 (n_459, n_445, n_444, n_653, n_341);
  and g518 (n_447, n_445, n_444, n_443, n_349);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_latch(ena, d, aclr, apre, q);
  input ena, d, aclr, apre;
  output q;
  wire ena, d, aclr, apre;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(d or ena or apre or aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else begin
          if (ena) 
            qi <= d;
        end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux4(sel0, data0, sel1, data1, sel2, data2, sel3, data3, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or data0 or data1 or data2 or data3) 
      case ({sel0, sel1, sel2, sel3})
       4'b1000: z = data0;
       4'b0100: z = data1;
       4'b0010: z = data2;
       4'b0001: z = data3;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux4(sel0, data0, sel1, data1, sel2, data2, sel3, data3, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  wire z;
  wire w_0, w_1, w_2, w_3;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  or org (z, w_0, w_1, w_2, w_3);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux2(sel0, data0, sel1, data1, z);
  input sel0, data0, sel1, data1;
  output z;
  wire sel0, data0, sel1, data1;
  reg  z;
  always 
    @(sel0 or sel1 or data0 or data1) 
      case ({sel0, sel1})
       2'b10: z = data0;
       2'b01: z = data1;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux2(sel0, data0, sel1, data1, z);
  input sel0, data0, sel1, data1;
  output z;
  wire sel0, data0, sel1, data1;
  wire z;
  wire w_0, w_1;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux8(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2 or data3 or data4
         or data5 or data6 or data7) 
      case ({sel0, sel1, sel2})
       3'b000: z = data0;
       3'b100: z = data1;
       3'b010: z = data2;
       3'b110: z = data3;
       3'b001: z = data4;
       3'b101: z = data5;
       3'b011: z = data6;
       3'b111: z = data7;
      endcase
endmodule
`else
module CDN_bmux8(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  wire z;
  wire inv_sel0, inv_sel1, inv_sel2, w_0, w_1, w_2, w_3, w_4;
  wire w_5, w_6, w_7;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  not i_2 (inv_sel2, sel2);
  and a_0 (w_0, inv_sel2, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel2, inv_sel1, sel0, data1);
  and a_2 (w_2, inv_sel2, sel1, inv_sel0, data2);
  and a_3 (w_3, inv_sel2, sel1, sel0, data3);
  and a_4 (w_4, sel2, inv_sel1, inv_sel0, data4);
  and a_5 (w_5, sel2, inv_sel1, sel0, data5);
  and a_6 (w_6, sel2, sel1, inv_sel0, data6);
  and a_7 (w_7, sel2, sel1, sel0, data7);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7);
endmodule
`endif // ONE_HOT_MUX
`endif
